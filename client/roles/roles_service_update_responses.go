// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// RolesServiceUpdateReader is a Reader for the RolesServiceUpdate structure.
type RolesServiceUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RolesServiceUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRolesServiceUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRolesServiceUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRolesServiceUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRolesServiceUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /api/v1/roles/{id}] RolesService_Update", response, response.Code())
	}
}

// NewRolesServiceUpdateOK creates a RolesServiceUpdateOK with default headers values
func NewRolesServiceUpdateOK() *RolesServiceUpdateOK {
	return &RolesServiceUpdateOK{}
}

/*
RolesServiceUpdateOK describes a response with status code 200, with default header values.

Role object
*/
type RolesServiceUpdateOK struct {
	Payload *models.RoleModel
}

// IsSuccess returns true when this roles service update o k response has a 2xx status code
func (o *RolesServiceUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this roles service update o k response has a 3xx status code
func (o *RolesServiceUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update o k response has a 4xx status code
func (o *RolesServiceUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service update o k response has a 5xx status code
func (o *RolesServiceUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service update o k response a status code equal to that given
func (o *RolesServiceUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the roles service update o k response
func (o *RolesServiceUpdateOK) Code() int {
	return 200
}

func (o *RolesServiceUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateOK  %+v", 200, o.Payload)
}

func (o *RolesServiceUpdateOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateOK  %+v", 200, o.Payload)
}

func (o *RolesServiceUpdateOK) GetPayload() *models.RoleModel {
	return o.Payload
}

func (o *RolesServiceUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceUpdateBadRequest creates a RolesServiceUpdateBadRequest with default headers values
func NewRolesServiceUpdateBadRequest() *RolesServiceUpdateBadRequest {
	return &RolesServiceUpdateBadRequest{}
}

/*
RolesServiceUpdateBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RolesServiceUpdateBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this roles service update bad request response has a 2xx status code
func (o *RolesServiceUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service update bad request response has a 3xx status code
func (o *RolesServiceUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update bad request response has a 4xx status code
func (o *RolesServiceUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service update bad request response has a 5xx status code
func (o *RolesServiceUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service update bad request response a status code equal to that given
func (o *RolesServiceUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the roles service update bad request response
func (o *RolesServiceUpdateBadRequest) Code() int {
	return 400
}

func (o *RolesServiceUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceUpdateBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceUpdateBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *RolesServiceUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceUpdateForbidden creates a RolesServiceUpdateForbidden with default headers values
func NewRolesServiceUpdateForbidden() *RolesServiceUpdateForbidden {
	return &RolesServiceUpdateForbidden{}
}

/*
RolesServiceUpdateForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type RolesServiceUpdateForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this roles service update forbidden response has a 2xx status code
func (o *RolesServiceUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service update forbidden response has a 3xx status code
func (o *RolesServiceUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update forbidden response has a 4xx status code
func (o *RolesServiceUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service update forbidden response has a 5xx status code
func (o *RolesServiceUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service update forbidden response a status code equal to that given
func (o *RolesServiceUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the roles service update forbidden response
func (o *RolesServiceUpdateForbidden) Code() int {
	return 403
}

func (o *RolesServiceUpdateForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceUpdateForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceUpdateForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *RolesServiceUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceUpdateInternalServerError creates a RolesServiceUpdateInternalServerError with default headers values
func NewRolesServiceUpdateInternalServerError() *RolesServiceUpdateInternalServerError {
	return &RolesServiceUpdateInternalServerError{}
}

/*
RolesServiceUpdateInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RolesServiceUpdateInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this roles service update internal server error response has a 2xx status code
func (o *RolesServiceUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service update internal server error response has a 3xx status code
func (o *RolesServiceUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update internal server error response has a 4xx status code
func (o *RolesServiceUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service update internal server error response has a 5xx status code
func (o *RolesServiceUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this roles service update internal server error response a status code equal to that given
func (o *RolesServiceUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the roles service update internal server error response
func (o *RolesServiceUpdateInternalServerError) Code() int {
	return 500
}

func (o *RolesServiceUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{id}][%d] rolesServiceUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceUpdateInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *RolesServiceUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
