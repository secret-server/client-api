// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// RolesServicePatchGroupsReader is a Reader for the RolesServicePatchGroups structure.
type RolesServicePatchGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RolesServicePatchGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRolesServicePatchGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRolesServicePatchGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRolesServicePatchGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRolesServicePatchGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /api/v1/roles/{roleId}/groups] RolesService_PatchGroups", response, response.Code())
	}
}

// NewRolesServicePatchGroupsOK creates a RolesServicePatchGroupsOK with default headers values
func NewRolesServicePatchGroupsOK() *RolesServicePatchGroupsOK {
	return &RolesServicePatchGroupsOK{}
}

/*
RolesServicePatchGroupsOK describes a response with status code 200, with default header values.

Role object
*/
type RolesServicePatchGroupsOK struct {
	Payload *models.RoleGroupsPatchResult
}

// IsSuccess returns true when this roles service patch groups o k response has a 2xx status code
func (o *RolesServicePatchGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this roles service patch groups o k response has a 3xx status code
func (o *RolesServicePatchGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service patch groups o k response has a 4xx status code
func (o *RolesServicePatchGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service patch groups o k response has a 5xx status code
func (o *RolesServicePatchGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service patch groups o k response a status code equal to that given
func (o *RolesServicePatchGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the roles service patch groups o k response
func (o *RolesServicePatchGroupsOK) Code() int {
	return 200
}

func (o *RolesServicePatchGroupsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsOK  %+v", 200, o.Payload)
}

func (o *RolesServicePatchGroupsOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsOK  %+v", 200, o.Payload)
}

func (o *RolesServicePatchGroupsOK) GetPayload() *models.RoleGroupsPatchResult {
	return o.Payload
}

func (o *RolesServicePatchGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleGroupsPatchResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServicePatchGroupsBadRequest creates a RolesServicePatchGroupsBadRequest with default headers values
func NewRolesServicePatchGroupsBadRequest() *RolesServicePatchGroupsBadRequest {
	return &RolesServicePatchGroupsBadRequest{}
}

/*
RolesServicePatchGroupsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RolesServicePatchGroupsBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this roles service patch groups bad request response has a 2xx status code
func (o *RolesServicePatchGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service patch groups bad request response has a 3xx status code
func (o *RolesServicePatchGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service patch groups bad request response has a 4xx status code
func (o *RolesServicePatchGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service patch groups bad request response has a 5xx status code
func (o *RolesServicePatchGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service patch groups bad request response a status code equal to that given
func (o *RolesServicePatchGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the roles service patch groups bad request response
func (o *RolesServicePatchGroupsBadRequest) Code() int {
	return 400
}

func (o *RolesServicePatchGroupsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServicePatchGroupsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServicePatchGroupsBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *RolesServicePatchGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServicePatchGroupsForbidden creates a RolesServicePatchGroupsForbidden with default headers values
func NewRolesServicePatchGroupsForbidden() *RolesServicePatchGroupsForbidden {
	return &RolesServicePatchGroupsForbidden{}
}

/*
RolesServicePatchGroupsForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type RolesServicePatchGroupsForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this roles service patch groups forbidden response has a 2xx status code
func (o *RolesServicePatchGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service patch groups forbidden response has a 3xx status code
func (o *RolesServicePatchGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service patch groups forbidden response has a 4xx status code
func (o *RolesServicePatchGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service patch groups forbidden response has a 5xx status code
func (o *RolesServicePatchGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service patch groups forbidden response a status code equal to that given
func (o *RolesServicePatchGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the roles service patch groups forbidden response
func (o *RolesServicePatchGroupsForbidden) Code() int {
	return 403
}

func (o *RolesServicePatchGroupsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsForbidden  %+v", 403, o.Payload)
}

func (o *RolesServicePatchGroupsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsForbidden  %+v", 403, o.Payload)
}

func (o *RolesServicePatchGroupsForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *RolesServicePatchGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServicePatchGroupsInternalServerError creates a RolesServicePatchGroupsInternalServerError with default headers values
func NewRolesServicePatchGroupsInternalServerError() *RolesServicePatchGroupsInternalServerError {
	return &RolesServicePatchGroupsInternalServerError{}
}

/*
RolesServicePatchGroupsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RolesServicePatchGroupsInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this roles service patch groups internal server error response has a 2xx status code
func (o *RolesServicePatchGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service patch groups internal server error response has a 3xx status code
func (o *RolesServicePatchGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service patch groups internal server error response has a 4xx status code
func (o *RolesServicePatchGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service patch groups internal server error response has a 5xx status code
func (o *RolesServicePatchGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this roles service patch groups internal server error response a status code equal to that given
func (o *RolesServicePatchGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the roles service patch groups internal server error response
func (o *RolesServicePatchGroupsInternalServerError) Code() int {
	return 500
}

func (o *RolesServicePatchGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServicePatchGroupsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v1/roles/{roleId}/groups][%d] rolesServicePatchGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServicePatchGroupsInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *RolesServicePatchGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
