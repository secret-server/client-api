// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// RolesServiceUpdatePermissionsReader is a Reader for the RolesServiceUpdatePermissions structure.
type RolesServiceUpdatePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RolesServiceUpdatePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRolesServiceUpdatePermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRolesServiceUpdatePermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRolesServiceUpdatePermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRolesServiceUpdatePermissionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/roles/{id}/permissions] RolesService_UpdatePermissions", response, response.Code())
	}
}

// NewRolesServiceUpdatePermissionsOK creates a RolesServiceUpdatePermissionsOK with default headers values
func NewRolesServiceUpdatePermissionsOK() *RolesServiceUpdatePermissionsOK {
	return &RolesServiceUpdatePermissionsOK{}
}

/*
RolesServiceUpdatePermissionsOK describes a response with status code 200, with default header values.

Success / Fail
*/
type RolesServiceUpdatePermissionsOK struct {
	Payload *models.RolePermissionsAssignmentResponse
}

// IsSuccess returns true when this roles service update permissions o k response has a 2xx status code
func (o *RolesServiceUpdatePermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this roles service update permissions o k response has a 3xx status code
func (o *RolesServiceUpdatePermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update permissions o k response has a 4xx status code
func (o *RolesServiceUpdatePermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service update permissions o k response has a 5xx status code
func (o *RolesServiceUpdatePermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service update permissions o k response a status code equal to that given
func (o *RolesServiceUpdatePermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the roles service update permissions o k response
func (o *RolesServiceUpdatePermissionsOK) Code() int {
	return 200
}

func (o *RolesServiceUpdatePermissionsOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsOK  %+v", 200, o.Payload)
}

func (o *RolesServiceUpdatePermissionsOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsOK  %+v", 200, o.Payload)
}

func (o *RolesServiceUpdatePermissionsOK) GetPayload() *models.RolePermissionsAssignmentResponse {
	return o.Payload
}

func (o *RolesServiceUpdatePermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RolePermissionsAssignmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceUpdatePermissionsBadRequest creates a RolesServiceUpdatePermissionsBadRequest with default headers values
func NewRolesServiceUpdatePermissionsBadRequest() *RolesServiceUpdatePermissionsBadRequest {
	return &RolesServiceUpdatePermissionsBadRequest{}
}

/*
RolesServiceUpdatePermissionsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RolesServiceUpdatePermissionsBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this roles service update permissions bad request response has a 2xx status code
func (o *RolesServiceUpdatePermissionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service update permissions bad request response has a 3xx status code
func (o *RolesServiceUpdatePermissionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update permissions bad request response has a 4xx status code
func (o *RolesServiceUpdatePermissionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service update permissions bad request response has a 5xx status code
func (o *RolesServiceUpdatePermissionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service update permissions bad request response a status code equal to that given
func (o *RolesServiceUpdatePermissionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the roles service update permissions bad request response
func (o *RolesServiceUpdatePermissionsBadRequest) Code() int {
	return 400
}

func (o *RolesServiceUpdatePermissionsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceUpdatePermissionsBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceUpdatePermissionsBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *RolesServiceUpdatePermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceUpdatePermissionsForbidden creates a RolesServiceUpdatePermissionsForbidden with default headers values
func NewRolesServiceUpdatePermissionsForbidden() *RolesServiceUpdatePermissionsForbidden {
	return &RolesServiceUpdatePermissionsForbidden{}
}

/*
RolesServiceUpdatePermissionsForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type RolesServiceUpdatePermissionsForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this roles service update permissions forbidden response has a 2xx status code
func (o *RolesServiceUpdatePermissionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service update permissions forbidden response has a 3xx status code
func (o *RolesServiceUpdatePermissionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update permissions forbidden response has a 4xx status code
func (o *RolesServiceUpdatePermissionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service update permissions forbidden response has a 5xx status code
func (o *RolesServiceUpdatePermissionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service update permissions forbidden response a status code equal to that given
func (o *RolesServiceUpdatePermissionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the roles service update permissions forbidden response
func (o *RolesServiceUpdatePermissionsForbidden) Code() int {
	return 403
}

func (o *RolesServiceUpdatePermissionsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceUpdatePermissionsForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceUpdatePermissionsForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *RolesServiceUpdatePermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceUpdatePermissionsInternalServerError creates a RolesServiceUpdatePermissionsInternalServerError with default headers values
func NewRolesServiceUpdatePermissionsInternalServerError() *RolesServiceUpdatePermissionsInternalServerError {
	return &RolesServiceUpdatePermissionsInternalServerError{}
}

/*
RolesServiceUpdatePermissionsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RolesServiceUpdatePermissionsInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this roles service update permissions internal server error response has a 2xx status code
func (o *RolesServiceUpdatePermissionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service update permissions internal server error response has a 3xx status code
func (o *RolesServiceUpdatePermissionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service update permissions internal server error response has a 4xx status code
func (o *RolesServiceUpdatePermissionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service update permissions internal server error response has a 5xx status code
func (o *RolesServiceUpdatePermissionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this roles service update permissions internal server error response a status code equal to that given
func (o *RolesServiceUpdatePermissionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the roles service update permissions internal server error response
func (o *RolesServiceUpdatePermissionsInternalServerError) Code() int {
	return 500
}

func (o *RolesServiceUpdatePermissionsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceUpdatePermissionsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/roles/{id}/permissions][%d] rolesServiceUpdatePermissionsInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceUpdatePermissionsInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *RolesServiceUpdatePermissionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
