// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// RolesServiceStubReader is a Reader for the RolesServiceStub structure.
type RolesServiceStubReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RolesServiceStubReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRolesServiceStubOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRolesServiceStubBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRolesServiceStubForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRolesServiceStubInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/roles/stub] RolesService_Stub", response, response.Code())
	}
}

// NewRolesServiceStubOK creates a RolesServiceStubOK with default headers values
func NewRolesServiceStubOK() *RolesServiceStubOK {
	return &RolesServiceStubOK{}
}

/*
RolesServiceStubOK describes a response with status code 200, with default header values.

Role object
*/
type RolesServiceStubOK struct {
	Payload *models.RoleModel
}

// IsSuccess returns true when this roles service stub o k response has a 2xx status code
func (o *RolesServiceStubOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this roles service stub o k response has a 3xx status code
func (o *RolesServiceStubOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service stub o k response has a 4xx status code
func (o *RolesServiceStubOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service stub o k response has a 5xx status code
func (o *RolesServiceStubOK) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service stub o k response a status code equal to that given
func (o *RolesServiceStubOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the roles service stub o k response
func (o *RolesServiceStubOK) Code() int {
	return 200
}

func (o *RolesServiceStubOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubOK  %+v", 200, o.Payload)
}

func (o *RolesServiceStubOK) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubOK  %+v", 200, o.Payload)
}

func (o *RolesServiceStubOK) GetPayload() *models.RoleModel {
	return o.Payload
}

func (o *RolesServiceStubOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceStubBadRequest creates a RolesServiceStubBadRequest with default headers values
func NewRolesServiceStubBadRequest() *RolesServiceStubBadRequest {
	return &RolesServiceStubBadRequest{}
}

/*
RolesServiceStubBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RolesServiceStubBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this roles service stub bad request response has a 2xx status code
func (o *RolesServiceStubBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service stub bad request response has a 3xx status code
func (o *RolesServiceStubBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service stub bad request response has a 4xx status code
func (o *RolesServiceStubBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service stub bad request response has a 5xx status code
func (o *RolesServiceStubBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service stub bad request response a status code equal to that given
func (o *RolesServiceStubBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the roles service stub bad request response
func (o *RolesServiceStubBadRequest) Code() int {
	return 400
}

func (o *RolesServiceStubBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceStubBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceStubBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *RolesServiceStubBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceStubForbidden creates a RolesServiceStubForbidden with default headers values
func NewRolesServiceStubForbidden() *RolesServiceStubForbidden {
	return &RolesServiceStubForbidden{}
}

/*
RolesServiceStubForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type RolesServiceStubForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this roles service stub forbidden response has a 2xx status code
func (o *RolesServiceStubForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service stub forbidden response has a 3xx status code
func (o *RolesServiceStubForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service stub forbidden response has a 4xx status code
func (o *RolesServiceStubForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service stub forbidden response has a 5xx status code
func (o *RolesServiceStubForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service stub forbidden response a status code equal to that given
func (o *RolesServiceStubForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the roles service stub forbidden response
func (o *RolesServiceStubForbidden) Code() int {
	return 403
}

func (o *RolesServiceStubForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceStubForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceStubForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *RolesServiceStubForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceStubInternalServerError creates a RolesServiceStubInternalServerError with default headers values
func NewRolesServiceStubInternalServerError() *RolesServiceStubInternalServerError {
	return &RolesServiceStubInternalServerError{}
}

/*
RolesServiceStubInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RolesServiceStubInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this roles service stub internal server error response has a 2xx status code
func (o *RolesServiceStubInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service stub internal server error response has a 3xx status code
func (o *RolesServiceStubInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service stub internal server error response has a 4xx status code
func (o *RolesServiceStubInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service stub internal server error response has a 5xx status code
func (o *RolesServiceStubInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this roles service stub internal server error response a status code equal to that given
func (o *RolesServiceStubInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the roles service stub internal server error response
func (o *RolesServiceStubInternalServerError) Code() int {
	return 500
}

func (o *RolesServiceStubInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceStubInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/stub][%d] rolesServiceStubInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceStubInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *RolesServiceStubInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
