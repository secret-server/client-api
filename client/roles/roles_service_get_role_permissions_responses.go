// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// RolesServiceGetRolePermissionsReader is a Reader for the RolesServiceGetRolePermissions structure.
type RolesServiceGetRolePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RolesServiceGetRolePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRolesServiceGetRolePermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRolesServiceGetRolePermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRolesServiceGetRolePermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRolesServiceGetRolePermissionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/roles/{id}/permissions] RolesService_GetRolePermissions", response, response.Code())
	}
}

// NewRolesServiceGetRolePermissionsOK creates a RolesServiceGetRolePermissionsOK with default headers values
func NewRolesServiceGetRolePermissionsOK() *RolesServiceGetRolePermissionsOK {
	return &RolesServiceGetRolePermissionsOK{}
}

/*
RolesServiceGetRolePermissionsOK describes a response with status code 200, with default header values.

Role Permission model result object
*/
type RolesServiceGetRolePermissionsOK struct {
	Payload *models.PagingOfRolePermissionModel
}

// IsSuccess returns true when this roles service get role permissions o k response has a 2xx status code
func (o *RolesServiceGetRolePermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this roles service get role permissions o k response has a 3xx status code
func (o *RolesServiceGetRolePermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service get role permissions o k response has a 4xx status code
func (o *RolesServiceGetRolePermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service get role permissions o k response has a 5xx status code
func (o *RolesServiceGetRolePermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service get role permissions o k response a status code equal to that given
func (o *RolesServiceGetRolePermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the roles service get role permissions o k response
func (o *RolesServiceGetRolePermissionsOK) Code() int {
	return 200
}

func (o *RolesServiceGetRolePermissionsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsOK  %+v", 200, o.Payload)
}

func (o *RolesServiceGetRolePermissionsOK) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsOK  %+v", 200, o.Payload)
}

func (o *RolesServiceGetRolePermissionsOK) GetPayload() *models.PagingOfRolePermissionModel {
	return o.Payload
}

func (o *RolesServiceGetRolePermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagingOfRolePermissionModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceGetRolePermissionsBadRequest creates a RolesServiceGetRolePermissionsBadRequest with default headers values
func NewRolesServiceGetRolePermissionsBadRequest() *RolesServiceGetRolePermissionsBadRequest {
	return &RolesServiceGetRolePermissionsBadRequest{}
}

/*
RolesServiceGetRolePermissionsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RolesServiceGetRolePermissionsBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this roles service get role permissions bad request response has a 2xx status code
func (o *RolesServiceGetRolePermissionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service get role permissions bad request response has a 3xx status code
func (o *RolesServiceGetRolePermissionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service get role permissions bad request response has a 4xx status code
func (o *RolesServiceGetRolePermissionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service get role permissions bad request response has a 5xx status code
func (o *RolesServiceGetRolePermissionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service get role permissions bad request response a status code equal to that given
func (o *RolesServiceGetRolePermissionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the roles service get role permissions bad request response
func (o *RolesServiceGetRolePermissionsBadRequest) Code() int {
	return 400
}

func (o *RolesServiceGetRolePermissionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceGetRolePermissionsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsBadRequest  %+v", 400, o.Payload)
}

func (o *RolesServiceGetRolePermissionsBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *RolesServiceGetRolePermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceGetRolePermissionsForbidden creates a RolesServiceGetRolePermissionsForbidden with default headers values
func NewRolesServiceGetRolePermissionsForbidden() *RolesServiceGetRolePermissionsForbidden {
	return &RolesServiceGetRolePermissionsForbidden{}
}

/*
RolesServiceGetRolePermissionsForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type RolesServiceGetRolePermissionsForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this roles service get role permissions forbidden response has a 2xx status code
func (o *RolesServiceGetRolePermissionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service get role permissions forbidden response has a 3xx status code
func (o *RolesServiceGetRolePermissionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service get role permissions forbidden response has a 4xx status code
func (o *RolesServiceGetRolePermissionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this roles service get role permissions forbidden response has a 5xx status code
func (o *RolesServiceGetRolePermissionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this roles service get role permissions forbidden response a status code equal to that given
func (o *RolesServiceGetRolePermissionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the roles service get role permissions forbidden response
func (o *RolesServiceGetRolePermissionsForbidden) Code() int {
	return 403
}

func (o *RolesServiceGetRolePermissionsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceGetRolePermissionsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *RolesServiceGetRolePermissionsForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *RolesServiceGetRolePermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRolesServiceGetRolePermissionsInternalServerError creates a RolesServiceGetRolePermissionsInternalServerError with default headers values
func NewRolesServiceGetRolePermissionsInternalServerError() *RolesServiceGetRolePermissionsInternalServerError {
	return &RolesServiceGetRolePermissionsInternalServerError{}
}

/*
RolesServiceGetRolePermissionsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RolesServiceGetRolePermissionsInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this roles service get role permissions internal server error response has a 2xx status code
func (o *RolesServiceGetRolePermissionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this roles service get role permissions internal server error response has a 3xx status code
func (o *RolesServiceGetRolePermissionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this roles service get role permissions internal server error response has a 4xx status code
func (o *RolesServiceGetRolePermissionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this roles service get role permissions internal server error response has a 5xx status code
func (o *RolesServiceGetRolePermissionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this roles service get role permissions internal server error response a status code equal to that given
func (o *RolesServiceGetRolePermissionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the roles service get role permissions internal server error response
func (o *RolesServiceGetRolePermissionsInternalServerError) Code() int {
	return 500
}

func (o *RolesServiceGetRolePermissionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceGetRolePermissionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/roles/{id}/permissions][%d] rolesServiceGetRolePermissionsInternalServerError  %+v", 500, o.Payload)
}

func (o *RolesServiceGetRolePermissionsInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *RolesServiceGetRolePermissionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
