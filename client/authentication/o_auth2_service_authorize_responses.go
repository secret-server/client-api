// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// OAuth2ServiceAuthorizeReader is a Reader for the OAuth2ServiceAuthorize structure.
type OAuth2ServiceAuthorizeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OAuth2ServiceAuthorizeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOAuth2ServiceAuthorizeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOAuth2ServiceAuthorizeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /oauth2/token] OAuth2Service_Authorize", response, response.Code())
	}
}

// NewOAuth2ServiceAuthorizeOK creates a OAuth2ServiceAuthorizeOK with default headers values
func NewOAuth2ServiceAuthorizeOK() *OAuth2ServiceAuthorizeOK {
	return &OAuth2ServiceAuthorizeOK{}
}

/*
OAuth2ServiceAuthorizeOK describes a response with status code 200, with default header values.

Successful retrieval of an access token
*/
type OAuth2ServiceAuthorizeOK struct {
	Payload *models.TokenResponse
}

// IsSuccess returns true when this o auth2 service authorize o k response has a 2xx status code
func (o *OAuth2ServiceAuthorizeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this o auth2 service authorize o k response has a 3xx status code
func (o *OAuth2ServiceAuthorizeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this o auth2 service authorize o k response has a 4xx status code
func (o *OAuth2ServiceAuthorizeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this o auth2 service authorize o k response has a 5xx status code
func (o *OAuth2ServiceAuthorizeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this o auth2 service authorize o k response a status code equal to that given
func (o *OAuth2ServiceAuthorizeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the o auth2 service authorize o k response
func (o *OAuth2ServiceAuthorizeOK) Code() int {
	return 200
}

func (o *OAuth2ServiceAuthorizeOK) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] oAuth2ServiceAuthorizeOK  %+v", 200, o.Payload)
}

func (o *OAuth2ServiceAuthorizeOK) String() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] oAuth2ServiceAuthorizeOK  %+v", 200, o.Payload)
}

func (o *OAuth2ServiceAuthorizeOK) GetPayload() *models.TokenResponse {
	return o.Payload
}

func (o *OAuth2ServiceAuthorizeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOAuth2ServiceAuthorizeBadRequest creates a OAuth2ServiceAuthorizeBadRequest with default headers values
func NewOAuth2ServiceAuthorizeBadRequest() *OAuth2ServiceAuthorizeBadRequest {
	return &OAuth2ServiceAuthorizeBadRequest{}
}

/*
OAuth2ServiceAuthorizeBadRequest describes a response with status code 400, with default header values.

An error occurred
*/
type OAuth2ServiceAuthorizeBadRequest struct {
	Payload *models.TokenErrorResponse
}

// IsSuccess returns true when this o auth2 service authorize bad request response has a 2xx status code
func (o *OAuth2ServiceAuthorizeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this o auth2 service authorize bad request response has a 3xx status code
func (o *OAuth2ServiceAuthorizeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this o auth2 service authorize bad request response has a 4xx status code
func (o *OAuth2ServiceAuthorizeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this o auth2 service authorize bad request response has a 5xx status code
func (o *OAuth2ServiceAuthorizeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this o auth2 service authorize bad request response a status code equal to that given
func (o *OAuth2ServiceAuthorizeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the o auth2 service authorize bad request response
func (o *OAuth2ServiceAuthorizeBadRequest) Code() int {
	return 400
}

func (o *OAuth2ServiceAuthorizeBadRequest) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] oAuth2ServiceAuthorizeBadRequest  %+v", 400, o.Payload)
}

func (o *OAuth2ServiceAuthorizeBadRequest) String() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] oAuth2ServiceAuthorizeBadRequest  %+v", 400, o.Payload)
}

func (o *OAuth2ServiceAuthorizeBadRequest) GetPayload() *models.TokenErrorResponse {
	return o.Payload
}

func (o *OAuth2ServiceAuthorizeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
