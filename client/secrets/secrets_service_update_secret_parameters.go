// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/secret-server/client-api/models"
)

// NewSecretsServiceUpdateSecretParams creates a new SecretsServiceUpdateSecretParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSecretsServiceUpdateSecretParams() *SecretsServiceUpdateSecretParams {
	return &SecretsServiceUpdateSecretParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSecretsServiceUpdateSecretParamsWithTimeout creates a new SecretsServiceUpdateSecretParams object
// with the ability to set a timeout on a request.
func NewSecretsServiceUpdateSecretParamsWithTimeout(timeout time.Duration) *SecretsServiceUpdateSecretParams {
	return &SecretsServiceUpdateSecretParams{
		timeout: timeout,
	}
}

// NewSecretsServiceUpdateSecretParamsWithContext creates a new SecretsServiceUpdateSecretParams object
// with the ability to set a context for a request.
func NewSecretsServiceUpdateSecretParamsWithContext(ctx context.Context) *SecretsServiceUpdateSecretParams {
	return &SecretsServiceUpdateSecretParams{
		Context: ctx,
	}
}

// NewSecretsServiceUpdateSecretParamsWithHTTPClient creates a new SecretsServiceUpdateSecretParams object
// with the ability to set a custom HTTPClient for a request.
func NewSecretsServiceUpdateSecretParamsWithHTTPClient(client *http.Client) *SecretsServiceUpdateSecretParams {
	return &SecretsServiceUpdateSecretParams{
		HTTPClient: client,
	}
}

/*
SecretsServiceUpdateSecretParams contains all the parameters to send to the API endpoint

	for the secrets service update secret operation.

	Typically these are written to a http.Request.
*/
type SecretsServiceUpdateSecretParams struct {

	/* Args.

	   Secret update options
	*/
	Args *models.SecretUpdateArgs

	/* AutoCheckIn.

	   Automatically check in a secret after finding or updating.
	*/
	AutoCheckIn *bool

	/* AutoCheckout.

	   Automatically check out secret before finding or updating.
	*/
	AutoCheckout *bool

	/* AutoComment.

	   Leave a comment when checking in or out.
	*/
	AutoComment *string

	/* ForceCheckIn.

	   If secret is checked out, then force a check in.
	*/
	ForceCheckIn *bool

	/* ID.

	   Secret ID

	   Format: int32
	*/
	ID int32

	/* SecretPath.

	   A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.
	*/
	SecretPath *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the secrets service update secret params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecretsServiceUpdateSecretParams) WithDefaults() *SecretsServiceUpdateSecretParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the secrets service update secret params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecretsServiceUpdateSecretParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithTimeout(timeout time.Duration) *SecretsServiceUpdateSecretParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithContext(ctx context.Context) *SecretsServiceUpdateSecretParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithHTTPClient(client *http.Client) *SecretsServiceUpdateSecretParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArgs adds the args to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithArgs(args *models.SecretUpdateArgs) *SecretsServiceUpdateSecretParams {
	o.SetArgs(args)
	return o
}

// SetArgs adds the args to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetArgs(args *models.SecretUpdateArgs) {
	o.Args = args
}

// WithAutoCheckIn adds the autoCheckIn to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithAutoCheckIn(autoCheckIn *bool) *SecretsServiceUpdateSecretParams {
	o.SetAutoCheckIn(autoCheckIn)
	return o
}

// SetAutoCheckIn adds the autoCheckIn to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetAutoCheckIn(autoCheckIn *bool) {
	o.AutoCheckIn = autoCheckIn
}

// WithAutoCheckout adds the autoCheckout to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithAutoCheckout(autoCheckout *bool) *SecretsServiceUpdateSecretParams {
	o.SetAutoCheckout(autoCheckout)
	return o
}

// SetAutoCheckout adds the autoCheckout to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetAutoCheckout(autoCheckout *bool) {
	o.AutoCheckout = autoCheckout
}

// WithAutoComment adds the autoComment to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithAutoComment(autoComment *string) *SecretsServiceUpdateSecretParams {
	o.SetAutoComment(autoComment)
	return o
}

// SetAutoComment adds the autoComment to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetAutoComment(autoComment *string) {
	o.AutoComment = autoComment
}

// WithForceCheckIn adds the forceCheckIn to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithForceCheckIn(forceCheckIn *bool) *SecretsServiceUpdateSecretParams {
	o.SetForceCheckIn(forceCheckIn)
	return o
}

// SetForceCheckIn adds the forceCheckIn to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetForceCheckIn(forceCheckIn *bool) {
	o.ForceCheckIn = forceCheckIn
}

// WithID adds the id to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithID(id int32) *SecretsServiceUpdateSecretParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetID(id int32) {
	o.ID = id
}

// WithSecretPath adds the secretPath to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) WithSecretPath(secretPath *string) *SecretsServiceUpdateSecretParams {
	o.SetSecretPath(secretPath)
	return o
}

// SetSecretPath adds the secretPath to the secrets service update secret params
func (o *SecretsServiceUpdateSecretParams) SetSecretPath(secretPath *string) {
	o.SecretPath = secretPath
}

// WriteToRequest writes these params to a swagger request
func (o *SecretsServiceUpdateSecretParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Args != nil {
		if err := r.SetBodyParam(o.Args); err != nil {
			return err
		}
	}

	if o.AutoCheckIn != nil {

		// query param autoCheckIn
		var qrAutoCheckIn bool

		if o.AutoCheckIn != nil {
			qrAutoCheckIn = *o.AutoCheckIn
		}
		qAutoCheckIn := swag.FormatBool(qrAutoCheckIn)
		if qAutoCheckIn != "" {

			if err := r.SetQueryParam("autoCheckIn", qAutoCheckIn); err != nil {
				return err
			}
		}
	}

	if o.AutoCheckout != nil {

		// query param autoCheckout
		var qrAutoCheckout bool

		if o.AutoCheckout != nil {
			qrAutoCheckout = *o.AutoCheckout
		}
		qAutoCheckout := swag.FormatBool(qrAutoCheckout)
		if qAutoCheckout != "" {

			if err := r.SetQueryParam("autoCheckout", qAutoCheckout); err != nil {
				return err
			}
		}
	}

	if o.AutoComment != nil {

		// query param autoComment
		var qrAutoComment string

		if o.AutoComment != nil {
			qrAutoComment = *o.AutoComment
		}
		qAutoComment := qrAutoComment
		if qAutoComment != "" {

			if err := r.SetQueryParam("autoComment", qAutoComment); err != nil {
				return err
			}
		}
	}

	if o.ForceCheckIn != nil {

		// query param forceCheckIn
		var qrForceCheckIn bool

		if o.ForceCheckIn != nil {
			qrForceCheckIn = *o.ForceCheckIn
		}
		qForceCheckIn := swag.FormatBool(qrForceCheckIn)
		if qForceCheckIn != "" {

			if err := r.SetQueryParam("forceCheckIn", qForceCheckIn); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.SecretPath != nil {

		// query param secretPath
		var qrSecretPath string

		if o.SecretPath != nil {
			qrSecretPath = *o.SecretPath
		}
		qSecretPath := qrSecretPath
		if qSecretPath != "" {

			if err := r.SetQueryParam("secretPath", qSecretPath); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
