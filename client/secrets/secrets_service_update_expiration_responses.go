// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// SecretsServiceUpdateExpirationReader is a Reader for the SecretsServiceUpdateExpiration structure.
type SecretsServiceUpdateExpirationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SecretsServiceUpdateExpirationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSecretsServiceUpdateExpirationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSecretsServiceUpdateExpirationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSecretsServiceUpdateExpirationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSecretsServiceUpdateExpirationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/secrets/{id}/expiration] SecretsService_UpdateExpiration", response, response.Code())
	}
}

// NewSecretsServiceUpdateExpirationOK creates a SecretsServiceUpdateExpirationOK with default headers values
func NewSecretsServiceUpdateExpirationOK() *SecretsServiceUpdateExpirationOK {
	return &SecretsServiceUpdateExpirationOK{}
}

/*
SecretsServiceUpdateExpirationOK describes a response with status code 200, with default header values.

Updated secret settings
*/
type SecretsServiceUpdateExpirationOK struct {
	Payload *models.SecretDetailSettingsModel
}

// IsSuccess returns true when this secrets service update expiration o k response has a 2xx status code
func (o *SecretsServiceUpdateExpirationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this secrets service update expiration o k response has a 3xx status code
func (o *SecretsServiceUpdateExpirationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this secrets service update expiration o k response has a 4xx status code
func (o *SecretsServiceUpdateExpirationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this secrets service update expiration o k response has a 5xx status code
func (o *SecretsServiceUpdateExpirationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this secrets service update expiration o k response a status code equal to that given
func (o *SecretsServiceUpdateExpirationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the secrets service update expiration o k response
func (o *SecretsServiceUpdateExpirationOK) Code() int {
	return 200
}

func (o *SecretsServiceUpdateExpirationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationOK  %+v", 200, o.Payload)
}

func (o *SecretsServiceUpdateExpirationOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationOK  %+v", 200, o.Payload)
}

func (o *SecretsServiceUpdateExpirationOK) GetPayload() *models.SecretDetailSettingsModel {
	return o.Payload
}

func (o *SecretsServiceUpdateExpirationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SecretDetailSettingsModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretsServiceUpdateExpirationBadRequest creates a SecretsServiceUpdateExpirationBadRequest with default headers values
func NewSecretsServiceUpdateExpirationBadRequest() *SecretsServiceUpdateExpirationBadRequest {
	return &SecretsServiceUpdateExpirationBadRequest{}
}

/*
SecretsServiceUpdateExpirationBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SecretsServiceUpdateExpirationBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this secrets service update expiration bad request response has a 2xx status code
func (o *SecretsServiceUpdateExpirationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this secrets service update expiration bad request response has a 3xx status code
func (o *SecretsServiceUpdateExpirationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this secrets service update expiration bad request response has a 4xx status code
func (o *SecretsServiceUpdateExpirationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this secrets service update expiration bad request response has a 5xx status code
func (o *SecretsServiceUpdateExpirationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this secrets service update expiration bad request response a status code equal to that given
func (o *SecretsServiceUpdateExpirationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the secrets service update expiration bad request response
func (o *SecretsServiceUpdateExpirationBadRequest) Code() int {
	return 400
}

func (o *SecretsServiceUpdateExpirationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationBadRequest  %+v", 400, o.Payload)
}

func (o *SecretsServiceUpdateExpirationBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationBadRequest  %+v", 400, o.Payload)
}

func (o *SecretsServiceUpdateExpirationBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *SecretsServiceUpdateExpirationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretsServiceUpdateExpirationForbidden creates a SecretsServiceUpdateExpirationForbidden with default headers values
func NewSecretsServiceUpdateExpirationForbidden() *SecretsServiceUpdateExpirationForbidden {
	return &SecretsServiceUpdateExpirationForbidden{}
}

/*
SecretsServiceUpdateExpirationForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type SecretsServiceUpdateExpirationForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this secrets service update expiration forbidden response has a 2xx status code
func (o *SecretsServiceUpdateExpirationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this secrets service update expiration forbidden response has a 3xx status code
func (o *SecretsServiceUpdateExpirationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this secrets service update expiration forbidden response has a 4xx status code
func (o *SecretsServiceUpdateExpirationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this secrets service update expiration forbidden response has a 5xx status code
func (o *SecretsServiceUpdateExpirationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this secrets service update expiration forbidden response a status code equal to that given
func (o *SecretsServiceUpdateExpirationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the secrets service update expiration forbidden response
func (o *SecretsServiceUpdateExpirationForbidden) Code() int {
	return 403
}

func (o *SecretsServiceUpdateExpirationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationForbidden  %+v", 403, o.Payload)
}

func (o *SecretsServiceUpdateExpirationForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationForbidden  %+v", 403, o.Payload)
}

func (o *SecretsServiceUpdateExpirationForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *SecretsServiceUpdateExpirationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretsServiceUpdateExpirationInternalServerError creates a SecretsServiceUpdateExpirationInternalServerError with default headers values
func NewSecretsServiceUpdateExpirationInternalServerError() *SecretsServiceUpdateExpirationInternalServerError {
	return &SecretsServiceUpdateExpirationInternalServerError{}
}

/*
SecretsServiceUpdateExpirationInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type SecretsServiceUpdateExpirationInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this secrets service update expiration internal server error response has a 2xx status code
func (o *SecretsServiceUpdateExpirationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this secrets service update expiration internal server error response has a 3xx status code
func (o *SecretsServiceUpdateExpirationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this secrets service update expiration internal server error response has a 4xx status code
func (o *SecretsServiceUpdateExpirationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this secrets service update expiration internal server error response has a 5xx status code
func (o *SecretsServiceUpdateExpirationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this secrets service update expiration internal server error response a status code equal to that given
func (o *SecretsServiceUpdateExpirationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the secrets service update expiration internal server error response
func (o *SecretsServiceUpdateExpirationInternalServerError) Code() int {
	return 500
}

func (o *SecretsServiceUpdateExpirationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationInternalServerError  %+v", 500, o.Payload)
}

func (o *SecretsServiceUpdateExpirationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/secrets/{id}/expiration][%d] secretsServiceUpdateExpirationInternalServerError  %+v", 500, o.Payload)
}

func (o *SecretsServiceUpdateExpirationInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *SecretsServiceUpdateExpirationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
