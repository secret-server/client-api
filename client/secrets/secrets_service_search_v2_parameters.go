// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSecretsServiceSearchV2Params creates a new SecretsServiceSearchV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSecretsServiceSearchV2Params() *SecretsServiceSearchV2Params {
	return &SecretsServiceSearchV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewSecretsServiceSearchV2ParamsWithTimeout creates a new SecretsServiceSearchV2Params object
// with the ability to set a timeout on a request.
func NewSecretsServiceSearchV2ParamsWithTimeout(timeout time.Duration) *SecretsServiceSearchV2Params {
	return &SecretsServiceSearchV2Params{
		timeout: timeout,
	}
}

// NewSecretsServiceSearchV2ParamsWithContext creates a new SecretsServiceSearchV2Params object
// with the ability to set a context for a request.
func NewSecretsServiceSearchV2ParamsWithContext(ctx context.Context) *SecretsServiceSearchV2Params {
	return &SecretsServiceSearchV2Params{
		Context: ctx,
	}
}

// NewSecretsServiceSearchV2ParamsWithHTTPClient creates a new SecretsServiceSearchV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewSecretsServiceSearchV2ParamsWithHTTPClient(client *http.Client) *SecretsServiceSearchV2Params {
	return &SecretsServiceSearchV2Params{
		HTTPClient: client,
	}
}

/*
SecretsServiceSearchV2Params contains all the parameters to send to the API endpoint

	for the secrets service search v2 operation.

	Typically these are written to a http.Request.
*/
type SecretsServiceSearchV2Params struct {

	/* FilterAllowDoubleLocks.

	   Whether to allow DoubleLocks as part of the search. True by default.
	*/
	FilterAllowDoubleLocks *bool

	/* FilterDoNotCalculateTotal.

	   Whether to return the total number of secrets matching the filters. False by default. If false, the total can be retrieved separately by calling /v1/secrets/search-total with the same arguments used in the search.
	*/
	FilterDoNotCalculateTotal *bool

	/* FilterDoubleLockID.

	   Only include Secrets with this DoubleLock ID assigned in the search results.

	   Format: int32
	*/
	FilterDoubleLockID *int32

	/* FilterExtFieldsCombined.

	   A comma delimited list of all extended fields to return.  All fields must be marked as exposed for display.  When populated this value will be used instead of ExtendedFields[].  Combining the fields decreases the size of the GET URL to avoid the 2048 character length restriction in IIS.
	*/
	FilterExtFieldsCombined *string

	/* FilterExtendedFields.

	   An array of names of Secret Template fields to return.  Only exposed fields can be returned.  This parameter will be ignored if ExtFieldsCombined is sent.
	*/
	FilterExtendedFields []string

	/* FilterExtendedTypeID.

	   If not null, return only secrets matching the specified extended mapping type as defined on the secretâ€™s template.

	   Format: int32
	*/
	FilterExtendedTypeID *int32

	/* FilterFolderID.

	   If not null, returns only secrets within the specified folder.

	   Format: int32
	*/
	FilterFolderID *int32

	/* FilterHasLauncher.

	   Whether to only return secrets with or without launchers. If null, returns secrets regardless of whether they have launchers.
	*/
	FilterHasLauncher *bool

	/* FilterHeartbeatStatus.

	   If not null, returns only secrets with a certain heartbeat status.
	*/
	FilterHeartbeatStatus *string

	/* FilterIncludeActive.

	   Whether to include active secrets in results (when excluded equals true).
	*/
	FilterIncludeActive *bool

	/* FilterIncludeInactive.

	   Whether to include inactive secrets in results.
	*/
	FilterIncludeInactive *bool

	/* FilterIncludeRestricted.

	   Whether to include restricted secrets in results. Restricted secrets are secrets that are DoubleLocked, require approval, or require a comment to view.
	*/
	FilterIncludeRestricted *bool

	/* FilterIncludeSubFolders.

	   Whether to include secrets in subfolders of the specified folder.
	*/
	FilterIncludeSubFolders *bool

	/* FilterIsExactMatch.

	   Whether to do an exact match of the search text or a partial match. If an exact match, the entire secret name, field value, or list option in a list field must match the search text.
	*/
	FilterIsExactMatch *bool

	/* FilterOnlyCheckedOutSecrets.

	   Whether to only return secrets that are or are not checked out. If null, returns secrets regardless of whether they are checked out.
	*/
	FilterOnlyCheckedOutSecrets *bool

	/* FilterOnlyRPCEnabled.

	   Whether to only include secrets whose template has Remote Password Changing enabled.
	*/
	FilterOnlyRPCEnabled *bool

	/* FilterOnlySecretsCheckedOutByUser.

	   Whether to only return secrets that are or are not checked out by the querying user. If null, returns secrets regardless of whether they are checked out.
	*/
	FilterOnlySecretsCheckedOutByUser *bool

	/* FilterOnlySharedWithMe.

	   When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.
	*/
	FilterOnlySharedWithMe *bool

	/* FilterPasswordTypeIds.

	   If not null, returns only secrets matching the specified password types.
	*/
	FilterPasswordTypeIds []int64

	/* FilterPermissionRequired.

	   Specify whether to filter by List, View, Edit, or Owner permission. Default is List.
	*/
	FilterPermissionRequired *string

	/* FilterScope.

	   Specify whether to search All, Recent, or Favorites
	*/
	FilterScope *string

	/* FilterSearchField.

	   If set, restricts the search to only match secrets where the value of the field specified by name contains the search text.
	*/
	FilterSearchField *string

	/* FilterSearchFieldSlug.

	   If set, restricts the search to only match secrets where the value of the field specified by the slug name contains the search text. This will override SearchField.
	*/
	FilterSearchFieldSlug *string

	/* FilterSearchText.

	   The text to match in the secret name, field value, or list field contents.
	*/
	FilterSearchText *string

	/* FilterSecretIds.

	   If not null or empty, returns only secrets matching the specified secret ids.
	*/
	FilterSecretIds []int64

	/* FilterSecretTemplateIds.

	   If not null or empty, returns only secrets matching the specified templates.
	*/
	FilterSecretTemplateIds []int64

	/* FilterSecretTemplateIdsCombined.

	   A comma delimited list of all secret template IDs.  When populated this value will be used instead of SecretTemplateIds[].  Combining the fields decreases the size of the GET URL to avoid the 2048 character length restriction in IIS.
	*/
	FilterSecretTemplateIdsCombined *string

	/* FilterSiteID.

	   If not null, returns only secrets within a the specified site.

	   Format: int32
	*/
	FilterSiteID *int32

	/* Skip.

	   Number of records to skip before taking results

	   Format: int32
	*/
	Skip *int32

	/* SortBy0Direction.

	   Sort direction
	*/
	SortBy0Direction *string

	/* SortBy0Name.

	   Sort field name
	*/
	SortBy0Name *string

	/* SortBy0Priority.

	   Priority index. Sorts with lower values are executed earlier

	   Format: int32
	*/
	SortBy0Priority *int32

	/* Take.

	   Maximum number of records to include in results

	   Format: int32
	*/
	Take *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the secrets service search v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecretsServiceSearchV2Params) WithDefaults() *SecretsServiceSearchV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the secrets service search v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecretsServiceSearchV2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithTimeout(timeout time.Duration) *SecretsServiceSearchV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithContext(ctx context.Context) *SecretsServiceSearchV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithHTTPClient(client *http.Client) *SecretsServiceSearchV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterAllowDoubleLocks adds the filterAllowDoubleLocks to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterAllowDoubleLocks(filterAllowDoubleLocks *bool) *SecretsServiceSearchV2Params {
	o.SetFilterAllowDoubleLocks(filterAllowDoubleLocks)
	return o
}

// SetFilterAllowDoubleLocks adds the filterAllowDoubleLocks to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterAllowDoubleLocks(filterAllowDoubleLocks *bool) {
	o.FilterAllowDoubleLocks = filterAllowDoubleLocks
}

// WithFilterDoNotCalculateTotal adds the filterDoNotCalculateTotal to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterDoNotCalculateTotal(filterDoNotCalculateTotal *bool) *SecretsServiceSearchV2Params {
	o.SetFilterDoNotCalculateTotal(filterDoNotCalculateTotal)
	return o
}

// SetFilterDoNotCalculateTotal adds the filterDoNotCalculateTotal to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterDoNotCalculateTotal(filterDoNotCalculateTotal *bool) {
	o.FilterDoNotCalculateTotal = filterDoNotCalculateTotal
}

// WithFilterDoubleLockID adds the filterDoubleLockID to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterDoubleLockID(filterDoubleLockID *int32) *SecretsServiceSearchV2Params {
	o.SetFilterDoubleLockID(filterDoubleLockID)
	return o
}

// SetFilterDoubleLockID adds the filterDoubleLockId to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterDoubleLockID(filterDoubleLockID *int32) {
	o.FilterDoubleLockID = filterDoubleLockID
}

// WithFilterExtFieldsCombined adds the filterExtFieldsCombined to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterExtFieldsCombined(filterExtFieldsCombined *string) *SecretsServiceSearchV2Params {
	o.SetFilterExtFieldsCombined(filterExtFieldsCombined)
	return o
}

// SetFilterExtFieldsCombined adds the filterExtFieldsCombined to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterExtFieldsCombined(filterExtFieldsCombined *string) {
	o.FilterExtFieldsCombined = filterExtFieldsCombined
}

// WithFilterExtendedFields adds the filterExtendedFields to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterExtendedFields(filterExtendedFields []string) *SecretsServiceSearchV2Params {
	o.SetFilterExtendedFields(filterExtendedFields)
	return o
}

// SetFilterExtendedFields adds the filterExtendedFields to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterExtendedFields(filterExtendedFields []string) {
	o.FilterExtendedFields = filterExtendedFields
}

// WithFilterExtendedTypeID adds the filterExtendedTypeID to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterExtendedTypeID(filterExtendedTypeID *int32) *SecretsServiceSearchV2Params {
	o.SetFilterExtendedTypeID(filterExtendedTypeID)
	return o
}

// SetFilterExtendedTypeID adds the filterExtendedTypeId to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterExtendedTypeID(filterExtendedTypeID *int32) {
	o.FilterExtendedTypeID = filterExtendedTypeID
}

// WithFilterFolderID adds the filterFolderID to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterFolderID(filterFolderID *int32) *SecretsServiceSearchV2Params {
	o.SetFilterFolderID(filterFolderID)
	return o
}

// SetFilterFolderID adds the filterFolderId to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterFolderID(filterFolderID *int32) {
	o.FilterFolderID = filterFolderID
}

// WithFilterHasLauncher adds the filterHasLauncher to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterHasLauncher(filterHasLauncher *bool) *SecretsServiceSearchV2Params {
	o.SetFilterHasLauncher(filterHasLauncher)
	return o
}

// SetFilterHasLauncher adds the filterHasLauncher to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterHasLauncher(filterHasLauncher *bool) {
	o.FilterHasLauncher = filterHasLauncher
}

// WithFilterHeartbeatStatus adds the filterHeartbeatStatus to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterHeartbeatStatus(filterHeartbeatStatus *string) *SecretsServiceSearchV2Params {
	o.SetFilterHeartbeatStatus(filterHeartbeatStatus)
	return o
}

// SetFilterHeartbeatStatus adds the filterHeartbeatStatus to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterHeartbeatStatus(filterHeartbeatStatus *string) {
	o.FilterHeartbeatStatus = filterHeartbeatStatus
}

// WithFilterIncludeActive adds the filterIncludeActive to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterIncludeActive(filterIncludeActive *bool) *SecretsServiceSearchV2Params {
	o.SetFilterIncludeActive(filterIncludeActive)
	return o
}

// SetFilterIncludeActive adds the filterIncludeActive to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterIncludeActive(filterIncludeActive *bool) {
	o.FilterIncludeActive = filterIncludeActive
}

// WithFilterIncludeInactive adds the filterIncludeInactive to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterIncludeInactive(filterIncludeInactive *bool) *SecretsServiceSearchV2Params {
	o.SetFilterIncludeInactive(filterIncludeInactive)
	return o
}

// SetFilterIncludeInactive adds the filterIncludeInactive to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterIncludeInactive(filterIncludeInactive *bool) {
	o.FilterIncludeInactive = filterIncludeInactive
}

// WithFilterIncludeRestricted adds the filterIncludeRestricted to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterIncludeRestricted(filterIncludeRestricted *bool) *SecretsServiceSearchV2Params {
	o.SetFilterIncludeRestricted(filterIncludeRestricted)
	return o
}

// SetFilterIncludeRestricted adds the filterIncludeRestricted to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterIncludeRestricted(filterIncludeRestricted *bool) {
	o.FilterIncludeRestricted = filterIncludeRestricted
}

// WithFilterIncludeSubFolders adds the filterIncludeSubFolders to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterIncludeSubFolders(filterIncludeSubFolders *bool) *SecretsServiceSearchV2Params {
	o.SetFilterIncludeSubFolders(filterIncludeSubFolders)
	return o
}

// SetFilterIncludeSubFolders adds the filterIncludeSubFolders to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterIncludeSubFolders(filterIncludeSubFolders *bool) {
	o.FilterIncludeSubFolders = filterIncludeSubFolders
}

// WithFilterIsExactMatch adds the filterIsExactMatch to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterIsExactMatch(filterIsExactMatch *bool) *SecretsServiceSearchV2Params {
	o.SetFilterIsExactMatch(filterIsExactMatch)
	return o
}

// SetFilterIsExactMatch adds the filterIsExactMatch to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterIsExactMatch(filterIsExactMatch *bool) {
	o.FilterIsExactMatch = filterIsExactMatch
}

// WithFilterOnlyCheckedOutSecrets adds the filterOnlyCheckedOutSecrets to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterOnlyCheckedOutSecrets(filterOnlyCheckedOutSecrets *bool) *SecretsServiceSearchV2Params {
	o.SetFilterOnlyCheckedOutSecrets(filterOnlyCheckedOutSecrets)
	return o
}

// SetFilterOnlyCheckedOutSecrets adds the filterOnlyCheckedOutSecrets to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterOnlyCheckedOutSecrets(filterOnlyCheckedOutSecrets *bool) {
	o.FilterOnlyCheckedOutSecrets = filterOnlyCheckedOutSecrets
}

// WithFilterOnlyRPCEnabled adds the filterOnlyRPCEnabled to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterOnlyRPCEnabled(filterOnlyRPCEnabled *bool) *SecretsServiceSearchV2Params {
	o.SetFilterOnlyRPCEnabled(filterOnlyRPCEnabled)
	return o
}

// SetFilterOnlyRPCEnabled adds the filterOnlyRpcEnabled to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterOnlyRPCEnabled(filterOnlyRPCEnabled *bool) {
	o.FilterOnlyRPCEnabled = filterOnlyRPCEnabled
}

// WithFilterOnlySecretsCheckedOutByUser adds the filterOnlySecretsCheckedOutByUser to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterOnlySecretsCheckedOutByUser(filterOnlySecretsCheckedOutByUser *bool) *SecretsServiceSearchV2Params {
	o.SetFilterOnlySecretsCheckedOutByUser(filterOnlySecretsCheckedOutByUser)
	return o
}

// SetFilterOnlySecretsCheckedOutByUser adds the filterOnlySecretsCheckedOutByUser to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterOnlySecretsCheckedOutByUser(filterOnlySecretsCheckedOutByUser *bool) {
	o.FilterOnlySecretsCheckedOutByUser = filterOnlySecretsCheckedOutByUser
}

// WithFilterOnlySharedWithMe adds the filterOnlySharedWithMe to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterOnlySharedWithMe(filterOnlySharedWithMe *bool) *SecretsServiceSearchV2Params {
	o.SetFilterOnlySharedWithMe(filterOnlySharedWithMe)
	return o
}

// SetFilterOnlySharedWithMe adds the filterOnlySharedWithMe to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterOnlySharedWithMe(filterOnlySharedWithMe *bool) {
	o.FilterOnlySharedWithMe = filterOnlySharedWithMe
}

// WithFilterPasswordTypeIds adds the filterPasswordTypeIds to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterPasswordTypeIds(filterPasswordTypeIds []int64) *SecretsServiceSearchV2Params {
	o.SetFilterPasswordTypeIds(filterPasswordTypeIds)
	return o
}

// SetFilterPasswordTypeIds adds the filterPasswordTypeIds to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterPasswordTypeIds(filterPasswordTypeIds []int64) {
	o.FilterPasswordTypeIds = filterPasswordTypeIds
}

// WithFilterPermissionRequired adds the filterPermissionRequired to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterPermissionRequired(filterPermissionRequired *string) *SecretsServiceSearchV2Params {
	o.SetFilterPermissionRequired(filterPermissionRequired)
	return o
}

// SetFilterPermissionRequired adds the filterPermissionRequired to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterPermissionRequired(filterPermissionRequired *string) {
	o.FilterPermissionRequired = filterPermissionRequired
}

// WithFilterScope adds the filterScope to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterScope(filterScope *string) *SecretsServiceSearchV2Params {
	o.SetFilterScope(filterScope)
	return o
}

// SetFilterScope adds the filterScope to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterScope(filterScope *string) {
	o.FilterScope = filterScope
}

// WithFilterSearchField adds the filterSearchField to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterSearchField(filterSearchField *string) *SecretsServiceSearchV2Params {
	o.SetFilterSearchField(filterSearchField)
	return o
}

// SetFilterSearchField adds the filterSearchField to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterSearchField(filterSearchField *string) {
	o.FilterSearchField = filterSearchField
}

// WithFilterSearchFieldSlug adds the filterSearchFieldSlug to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterSearchFieldSlug(filterSearchFieldSlug *string) *SecretsServiceSearchV2Params {
	o.SetFilterSearchFieldSlug(filterSearchFieldSlug)
	return o
}

// SetFilterSearchFieldSlug adds the filterSearchFieldSlug to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterSearchFieldSlug(filterSearchFieldSlug *string) {
	o.FilterSearchFieldSlug = filterSearchFieldSlug
}

// WithFilterSearchText adds the filterSearchText to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterSearchText(filterSearchText *string) *SecretsServiceSearchV2Params {
	o.SetFilterSearchText(filterSearchText)
	return o
}

// SetFilterSearchText adds the filterSearchText to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterSearchText(filterSearchText *string) {
	o.FilterSearchText = filterSearchText
}

// WithFilterSecretIds adds the filterSecretIds to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterSecretIds(filterSecretIds []int64) *SecretsServiceSearchV2Params {
	o.SetFilterSecretIds(filterSecretIds)
	return o
}

// SetFilterSecretIds adds the filterSecretIds to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterSecretIds(filterSecretIds []int64) {
	o.FilterSecretIds = filterSecretIds
}

// WithFilterSecretTemplateIds adds the filterSecretTemplateIds to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterSecretTemplateIds(filterSecretTemplateIds []int64) *SecretsServiceSearchV2Params {
	o.SetFilterSecretTemplateIds(filterSecretTemplateIds)
	return o
}

// SetFilterSecretTemplateIds adds the filterSecretTemplateIds to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterSecretTemplateIds(filterSecretTemplateIds []int64) {
	o.FilterSecretTemplateIds = filterSecretTemplateIds
}

// WithFilterSecretTemplateIdsCombined adds the filterSecretTemplateIdsCombined to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterSecretTemplateIdsCombined(filterSecretTemplateIdsCombined *string) *SecretsServiceSearchV2Params {
	o.SetFilterSecretTemplateIdsCombined(filterSecretTemplateIdsCombined)
	return o
}

// SetFilterSecretTemplateIdsCombined adds the filterSecretTemplateIdsCombined to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterSecretTemplateIdsCombined(filterSecretTemplateIdsCombined *string) {
	o.FilterSecretTemplateIdsCombined = filterSecretTemplateIdsCombined
}

// WithFilterSiteID adds the filterSiteID to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithFilterSiteID(filterSiteID *int32) *SecretsServiceSearchV2Params {
	o.SetFilterSiteID(filterSiteID)
	return o
}

// SetFilterSiteID adds the filterSiteId to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetFilterSiteID(filterSiteID *int32) {
	o.FilterSiteID = filterSiteID
}

// WithSkip adds the skip to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithSkip(skip *int32) *SecretsServiceSearchV2Params {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithSortBy0Direction adds the sortBy0Direction to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithSortBy0Direction(sortBy0Direction *string) *SecretsServiceSearchV2Params {
	o.SetSortBy0Direction(sortBy0Direction)
	return o
}

// SetSortBy0Direction adds the sortBy0Direction to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetSortBy0Direction(sortBy0Direction *string) {
	o.SortBy0Direction = sortBy0Direction
}

// WithSortBy0Name adds the sortBy0Name to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithSortBy0Name(sortBy0Name *string) *SecretsServiceSearchV2Params {
	o.SetSortBy0Name(sortBy0Name)
	return o
}

// SetSortBy0Name adds the sortBy0Name to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetSortBy0Name(sortBy0Name *string) {
	o.SortBy0Name = sortBy0Name
}

// WithSortBy0Priority adds the sortBy0Priority to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithSortBy0Priority(sortBy0Priority *int32) *SecretsServiceSearchV2Params {
	o.SetSortBy0Priority(sortBy0Priority)
	return o
}

// SetSortBy0Priority adds the sortBy0Priority to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetSortBy0Priority(sortBy0Priority *int32) {
	o.SortBy0Priority = sortBy0Priority
}

// WithTake adds the take to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) WithTake(take *int32) *SecretsServiceSearchV2Params {
	o.SetTake(take)
	return o
}

// SetTake adds the take to the secrets service search v2 params
func (o *SecretsServiceSearchV2Params) SetTake(take *int32) {
	o.Take = take
}

// WriteToRequest writes these params to a swagger request
func (o *SecretsServiceSearchV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAllowDoubleLocks != nil {

		// query param filter.allowDoubleLocks
		var qrFilterAllowDoubleLocks bool

		if o.FilterAllowDoubleLocks != nil {
			qrFilterAllowDoubleLocks = *o.FilterAllowDoubleLocks
		}
		qFilterAllowDoubleLocks := swag.FormatBool(qrFilterAllowDoubleLocks)
		if qFilterAllowDoubleLocks != "" {

			if err := r.SetQueryParam("filter.allowDoubleLocks", qFilterAllowDoubleLocks); err != nil {
				return err
			}
		}
	}

	if o.FilterDoNotCalculateTotal != nil {

		// query param filter.doNotCalculateTotal
		var qrFilterDoNotCalculateTotal bool

		if o.FilterDoNotCalculateTotal != nil {
			qrFilterDoNotCalculateTotal = *o.FilterDoNotCalculateTotal
		}
		qFilterDoNotCalculateTotal := swag.FormatBool(qrFilterDoNotCalculateTotal)
		if qFilterDoNotCalculateTotal != "" {

			if err := r.SetQueryParam("filter.doNotCalculateTotal", qFilterDoNotCalculateTotal); err != nil {
				return err
			}
		}
	}

	if o.FilterDoubleLockID != nil {

		// query param filter.doubleLockId
		var qrFilterDoubleLockID int32

		if o.FilterDoubleLockID != nil {
			qrFilterDoubleLockID = *o.FilterDoubleLockID
		}
		qFilterDoubleLockID := swag.FormatInt32(qrFilterDoubleLockID)
		if qFilterDoubleLockID != "" {

			if err := r.SetQueryParam("filter.doubleLockId", qFilterDoubleLockID); err != nil {
				return err
			}
		}
	}

	if o.FilterExtFieldsCombined != nil {

		// query param filter.extFieldsCombined
		var qrFilterExtFieldsCombined string

		if o.FilterExtFieldsCombined != nil {
			qrFilterExtFieldsCombined = *o.FilterExtFieldsCombined
		}
		qFilterExtFieldsCombined := qrFilterExtFieldsCombined
		if qFilterExtFieldsCombined != "" {

			if err := r.SetQueryParam("filter.extFieldsCombined", qFilterExtFieldsCombined); err != nil {
				return err
			}
		}
	}

	if o.FilterExtendedFields != nil {

		// binding items for filter.extendedFields
		joinedFilterExtendedFields := o.bindParamFilterExtendedFields(reg)

		// query array param filter.extendedFields
		if err := r.SetQueryParam("filter.extendedFields", joinedFilterExtendedFields...); err != nil {
			return err
		}
	}

	if o.FilterExtendedTypeID != nil {

		// query param filter.extendedTypeId
		var qrFilterExtendedTypeID int32

		if o.FilterExtendedTypeID != nil {
			qrFilterExtendedTypeID = *o.FilterExtendedTypeID
		}
		qFilterExtendedTypeID := swag.FormatInt32(qrFilterExtendedTypeID)
		if qFilterExtendedTypeID != "" {

			if err := r.SetQueryParam("filter.extendedTypeId", qFilterExtendedTypeID); err != nil {
				return err
			}
		}
	}

	if o.FilterFolderID != nil {

		// query param filter.folderId
		var qrFilterFolderID int32

		if o.FilterFolderID != nil {
			qrFilterFolderID = *o.FilterFolderID
		}
		qFilterFolderID := swag.FormatInt32(qrFilterFolderID)
		if qFilterFolderID != "" {

			if err := r.SetQueryParam("filter.folderId", qFilterFolderID); err != nil {
				return err
			}
		}
	}

	if o.FilterHasLauncher != nil {

		// query param filter.hasLauncher
		var qrFilterHasLauncher bool

		if o.FilterHasLauncher != nil {
			qrFilterHasLauncher = *o.FilterHasLauncher
		}
		qFilterHasLauncher := swag.FormatBool(qrFilterHasLauncher)
		if qFilterHasLauncher != "" {

			if err := r.SetQueryParam("filter.hasLauncher", qFilterHasLauncher); err != nil {
				return err
			}
		}
	}

	if o.FilterHeartbeatStatus != nil {

		// query param filter.heartbeatStatus
		var qrFilterHeartbeatStatus string

		if o.FilterHeartbeatStatus != nil {
			qrFilterHeartbeatStatus = *o.FilterHeartbeatStatus
		}
		qFilterHeartbeatStatus := qrFilterHeartbeatStatus
		if qFilterHeartbeatStatus != "" {

			if err := r.SetQueryParam("filter.heartbeatStatus", qFilterHeartbeatStatus); err != nil {
				return err
			}
		}
	}

	if o.FilterIncludeActive != nil {

		// query param filter.includeActive
		var qrFilterIncludeActive bool

		if o.FilterIncludeActive != nil {
			qrFilterIncludeActive = *o.FilterIncludeActive
		}
		qFilterIncludeActive := swag.FormatBool(qrFilterIncludeActive)
		if qFilterIncludeActive != "" {

			if err := r.SetQueryParam("filter.includeActive", qFilterIncludeActive); err != nil {
				return err
			}
		}
	}

	if o.FilterIncludeInactive != nil {

		// query param filter.includeInactive
		var qrFilterIncludeInactive bool

		if o.FilterIncludeInactive != nil {
			qrFilterIncludeInactive = *o.FilterIncludeInactive
		}
		qFilterIncludeInactive := swag.FormatBool(qrFilterIncludeInactive)
		if qFilterIncludeInactive != "" {

			if err := r.SetQueryParam("filter.includeInactive", qFilterIncludeInactive); err != nil {
				return err
			}
		}
	}

	if o.FilterIncludeRestricted != nil {

		// query param filter.includeRestricted
		var qrFilterIncludeRestricted bool

		if o.FilterIncludeRestricted != nil {
			qrFilterIncludeRestricted = *o.FilterIncludeRestricted
		}
		qFilterIncludeRestricted := swag.FormatBool(qrFilterIncludeRestricted)
		if qFilterIncludeRestricted != "" {

			if err := r.SetQueryParam("filter.includeRestricted", qFilterIncludeRestricted); err != nil {
				return err
			}
		}
	}

	if o.FilterIncludeSubFolders != nil {

		// query param filter.includeSubFolders
		var qrFilterIncludeSubFolders bool

		if o.FilterIncludeSubFolders != nil {
			qrFilterIncludeSubFolders = *o.FilterIncludeSubFolders
		}
		qFilterIncludeSubFolders := swag.FormatBool(qrFilterIncludeSubFolders)
		if qFilterIncludeSubFolders != "" {

			if err := r.SetQueryParam("filter.includeSubFolders", qFilterIncludeSubFolders); err != nil {
				return err
			}
		}
	}

	if o.FilterIsExactMatch != nil {

		// query param filter.isExactMatch
		var qrFilterIsExactMatch bool

		if o.FilterIsExactMatch != nil {
			qrFilterIsExactMatch = *o.FilterIsExactMatch
		}
		qFilterIsExactMatch := swag.FormatBool(qrFilterIsExactMatch)
		if qFilterIsExactMatch != "" {

			if err := r.SetQueryParam("filter.isExactMatch", qFilterIsExactMatch); err != nil {
				return err
			}
		}
	}

	if o.FilterOnlyCheckedOutSecrets != nil {

		// query param filter.onlyCheckedOutSecrets
		var qrFilterOnlyCheckedOutSecrets bool

		if o.FilterOnlyCheckedOutSecrets != nil {
			qrFilterOnlyCheckedOutSecrets = *o.FilterOnlyCheckedOutSecrets
		}
		qFilterOnlyCheckedOutSecrets := swag.FormatBool(qrFilterOnlyCheckedOutSecrets)
		if qFilterOnlyCheckedOutSecrets != "" {

			if err := r.SetQueryParam("filter.onlyCheckedOutSecrets", qFilterOnlyCheckedOutSecrets); err != nil {
				return err
			}
		}
	}

	if o.FilterOnlyRPCEnabled != nil {

		// query param filter.onlyRPCEnabled
		var qrFilterOnlyRPCEnabled bool

		if o.FilterOnlyRPCEnabled != nil {
			qrFilterOnlyRPCEnabled = *o.FilterOnlyRPCEnabled
		}
		qFilterOnlyRPCEnabled := swag.FormatBool(qrFilterOnlyRPCEnabled)
		if qFilterOnlyRPCEnabled != "" {

			if err := r.SetQueryParam("filter.onlyRPCEnabled", qFilterOnlyRPCEnabled); err != nil {
				return err
			}
		}
	}

	if o.FilterOnlySecretsCheckedOutByUser != nil {

		// query param filter.onlySecretsCheckedOutByUser
		var qrFilterOnlySecretsCheckedOutByUser bool

		if o.FilterOnlySecretsCheckedOutByUser != nil {
			qrFilterOnlySecretsCheckedOutByUser = *o.FilterOnlySecretsCheckedOutByUser
		}
		qFilterOnlySecretsCheckedOutByUser := swag.FormatBool(qrFilterOnlySecretsCheckedOutByUser)
		if qFilterOnlySecretsCheckedOutByUser != "" {

			if err := r.SetQueryParam("filter.onlySecretsCheckedOutByUser", qFilterOnlySecretsCheckedOutByUser); err != nil {
				return err
			}
		}
	}

	if o.FilterOnlySharedWithMe != nil {

		// query param filter.onlySharedWithMe
		var qrFilterOnlySharedWithMe bool

		if o.FilterOnlySharedWithMe != nil {
			qrFilterOnlySharedWithMe = *o.FilterOnlySharedWithMe
		}
		qFilterOnlySharedWithMe := swag.FormatBool(qrFilterOnlySharedWithMe)
		if qFilterOnlySharedWithMe != "" {

			if err := r.SetQueryParam("filter.onlySharedWithMe", qFilterOnlySharedWithMe); err != nil {
				return err
			}
		}
	}

	if o.FilterPasswordTypeIds != nil {

		// binding items for filter.passwordTypeIds
		joinedFilterPasswordTypeIds := o.bindParamFilterPasswordTypeIds(reg)

		// query array param filter.passwordTypeIds
		if err := r.SetQueryParam("filter.passwordTypeIds", joinedFilterPasswordTypeIds...); err != nil {
			return err
		}
	}

	if o.FilterPermissionRequired != nil {

		// query param filter.permissionRequired
		var qrFilterPermissionRequired string

		if o.FilterPermissionRequired != nil {
			qrFilterPermissionRequired = *o.FilterPermissionRequired
		}
		qFilterPermissionRequired := qrFilterPermissionRequired
		if qFilterPermissionRequired != "" {

			if err := r.SetQueryParam("filter.permissionRequired", qFilterPermissionRequired); err != nil {
				return err
			}
		}
	}

	if o.FilterScope != nil {

		// query param filter.scope
		var qrFilterScope string

		if o.FilterScope != nil {
			qrFilterScope = *o.FilterScope
		}
		qFilterScope := qrFilterScope
		if qFilterScope != "" {

			if err := r.SetQueryParam("filter.scope", qFilterScope); err != nil {
				return err
			}
		}
	}

	if o.FilterSearchField != nil {

		// query param filter.searchField
		var qrFilterSearchField string

		if o.FilterSearchField != nil {
			qrFilterSearchField = *o.FilterSearchField
		}
		qFilterSearchField := qrFilterSearchField
		if qFilterSearchField != "" {

			if err := r.SetQueryParam("filter.searchField", qFilterSearchField); err != nil {
				return err
			}
		}
	}

	if o.FilterSearchFieldSlug != nil {

		// query param filter.searchFieldSlug
		var qrFilterSearchFieldSlug string

		if o.FilterSearchFieldSlug != nil {
			qrFilterSearchFieldSlug = *o.FilterSearchFieldSlug
		}
		qFilterSearchFieldSlug := qrFilterSearchFieldSlug
		if qFilterSearchFieldSlug != "" {

			if err := r.SetQueryParam("filter.searchFieldSlug", qFilterSearchFieldSlug); err != nil {
				return err
			}
		}
	}

	if o.FilterSearchText != nil {

		// query param filter.searchText
		var qrFilterSearchText string

		if o.FilterSearchText != nil {
			qrFilterSearchText = *o.FilterSearchText
		}
		qFilterSearchText := qrFilterSearchText
		if qFilterSearchText != "" {

			if err := r.SetQueryParam("filter.searchText", qFilterSearchText); err != nil {
				return err
			}
		}
	}

	if o.FilterSecretIds != nil {

		// binding items for filter.secretIds
		joinedFilterSecretIds := o.bindParamFilterSecretIds(reg)

		// query array param filter.secretIds
		if err := r.SetQueryParam("filter.secretIds", joinedFilterSecretIds...); err != nil {
			return err
		}
	}

	if o.FilterSecretTemplateIds != nil {

		// binding items for filter.secretTemplateIds
		joinedFilterSecretTemplateIds := o.bindParamFilterSecretTemplateIds(reg)

		// query array param filter.secretTemplateIds
		if err := r.SetQueryParam("filter.secretTemplateIds", joinedFilterSecretTemplateIds...); err != nil {
			return err
		}
	}

	if o.FilterSecretTemplateIdsCombined != nil {

		// query param filter.secretTemplateIdsCombined
		var qrFilterSecretTemplateIdsCombined string

		if o.FilterSecretTemplateIdsCombined != nil {
			qrFilterSecretTemplateIdsCombined = *o.FilterSecretTemplateIdsCombined
		}
		qFilterSecretTemplateIdsCombined := qrFilterSecretTemplateIdsCombined
		if qFilterSecretTemplateIdsCombined != "" {

			if err := r.SetQueryParam("filter.secretTemplateIdsCombined", qFilterSecretTemplateIdsCombined); err != nil {
				return err
			}
		}
	}

	if o.FilterSiteID != nil {

		// query param filter.siteId
		var qrFilterSiteID int32

		if o.FilterSiteID != nil {
			qrFilterSiteID = *o.FilterSiteID
		}
		qFilterSiteID := swag.FormatInt32(qrFilterSiteID)
		if qFilterSiteID != "" {

			if err := r.SetQueryParam("filter.siteId", qFilterSiteID); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.SortBy0Direction != nil {

		// query param sortBy[0].direction
		var qrSortBy0Direction string

		if o.SortBy0Direction != nil {
			qrSortBy0Direction = *o.SortBy0Direction
		}
		qSortBy0Direction := qrSortBy0Direction
		if qSortBy0Direction != "" {

			if err := r.SetQueryParam("sortBy[0].direction", qSortBy0Direction); err != nil {
				return err
			}
		}
	}

	if o.SortBy0Name != nil {

		// query param sortBy[0].name
		var qrSortBy0Name string

		if o.SortBy0Name != nil {
			qrSortBy0Name = *o.SortBy0Name
		}
		qSortBy0Name := qrSortBy0Name
		if qSortBy0Name != "" {

			if err := r.SetQueryParam("sortBy[0].name", qSortBy0Name); err != nil {
				return err
			}
		}
	}

	if o.SortBy0Priority != nil {

		// query param sortBy[0].priority
		var qrSortBy0Priority int32

		if o.SortBy0Priority != nil {
			qrSortBy0Priority = *o.SortBy0Priority
		}
		qSortBy0Priority := swag.FormatInt32(qrSortBy0Priority)
		if qSortBy0Priority != "" {

			if err := r.SetQueryParam("sortBy[0].priority", qSortBy0Priority); err != nil {
				return err
			}
		}
	}

	if o.Take != nil {

		// query param take
		var qrTake int32

		if o.Take != nil {
			qrTake = *o.Take
		}
		qTake := swag.FormatInt32(qrTake)
		if qTake != "" {

			if err := r.SetQueryParam("take", qTake); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSecretsServiceSearchV2 binds the parameter filter.extendedFields
func (o *SecretsServiceSearchV2Params) bindParamFilterExtendedFields(formats strfmt.Registry) []string {
	filterExtendedFieldsIR := o.FilterExtendedFields

	var filterExtendedFieldsIC []string
	for _, filterExtendedFieldsIIR := range filterExtendedFieldsIR { // explode []string

		filterExtendedFieldsIIV := filterExtendedFieldsIIR // string as string
		filterExtendedFieldsIC = append(filterExtendedFieldsIC, filterExtendedFieldsIIV)
	}

	// items.CollectionFormat: "multi"
	filterExtendedFieldsIS := swag.JoinByFormat(filterExtendedFieldsIC, "multi")

	return filterExtendedFieldsIS
}

// bindParamSecretsServiceSearchV2 binds the parameter filter.passwordTypeIds
func (o *SecretsServiceSearchV2Params) bindParamFilterPasswordTypeIds(formats strfmt.Registry) []string {
	filterPasswordTypeIdsIR := o.FilterPasswordTypeIds

	var filterPasswordTypeIdsIC []string
	for _, filterPasswordTypeIdsIIR := range filterPasswordTypeIdsIR { // explode []int64

		filterPasswordTypeIdsIIV := swag.FormatInt64(filterPasswordTypeIdsIIR) // int64 as string
		filterPasswordTypeIdsIC = append(filterPasswordTypeIdsIC, filterPasswordTypeIdsIIV)
	}

	// items.CollectionFormat: "multi"
	filterPasswordTypeIdsIS := swag.JoinByFormat(filterPasswordTypeIdsIC, "multi")

	return filterPasswordTypeIdsIS
}

// bindParamSecretsServiceSearchV2 binds the parameter filter.secretIds
func (o *SecretsServiceSearchV2Params) bindParamFilterSecretIds(formats strfmt.Registry) []string {
	filterSecretIdsIR := o.FilterSecretIds

	var filterSecretIdsIC []string
	for _, filterSecretIdsIIR := range filterSecretIdsIR { // explode []int64

		filterSecretIdsIIV := swag.FormatInt64(filterSecretIdsIIR) // int64 as string
		filterSecretIdsIC = append(filterSecretIdsIC, filterSecretIdsIIV)
	}

	// items.CollectionFormat: "multi"
	filterSecretIdsIS := swag.JoinByFormat(filterSecretIdsIC, "multi")

	return filterSecretIdsIS
}

// bindParamSecretsServiceSearchV2 binds the parameter filter.secretTemplateIds
func (o *SecretsServiceSearchV2Params) bindParamFilterSecretTemplateIds(formats strfmt.Registry) []string {
	filterSecretTemplateIdsIR := o.FilterSecretTemplateIds

	var filterSecretTemplateIdsIC []string
	for _, filterSecretTemplateIdsIIR := range filterSecretTemplateIdsIR { // explode []int64

		filterSecretTemplateIdsIIV := swag.FormatInt64(filterSecretTemplateIdsIIR) // int64 as string
		filterSecretTemplateIdsIC = append(filterSecretTemplateIdsIC, filterSecretTemplateIdsIIV)
	}

	// items.CollectionFormat: "multi"
	filterSecretTemplateIdsIS := swag.JoinByFormat(filterSecretTemplateIdsIC, "multi")

	return filterSecretTemplateIdsIS
}
