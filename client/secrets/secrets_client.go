// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SecretsServiceCreateSecret(params *SecretsServiceCreateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceCreateSecretOK, error)

	SecretsServiceDelete(params *SecretsServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceDeleteOK, error)

	SecretsServiceDeleteListFieldListDefinitions(params *SecretsServiceDeleteListFieldListDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceDeleteListFieldListDefinitionsOK, error)

	SecretsServiceExpire(params *SecretsServiceExpireParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceExpireOK, error)

	SecretsServiceGetField(params *SecretsServiceGetFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetFieldOK, error)

	SecretsServiceGetGeneral(params *SecretsServiceGetGeneralParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetGeneralOK, error)

	SecretsServiceGetListField(params *SecretsServiceGetListFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetListFieldOK, error)

	SecretsServiceGetListFieldListDefinitions(params *SecretsServiceGetListFieldListDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetListFieldListDefinitionsOK, error)

	SecretsServiceGetLookup(params *SecretsServiceGetLookupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetLookupOK, error)

	SecretsServiceGetRestricted(params *SecretsServiceGetRestrictedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetRestrictedOK, error)

	SecretsServiceGetSecretExtendedSearchDetails(params *SecretsServiceGetSecretExtendedSearchDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetSecretExtendedSearchDetailsOK, error)

	SecretsServiceGetSecretState(params *SecretsServiceGetSecretStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetSecretStateOK, error)

	SecretsServiceGetSecretV2(params *SecretsServiceGetSecretV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetSecretV2OK, error)

	SecretsServicePutField(params *SecretsServicePutFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServicePutFieldOK, error)

	SecretsServiceRunHeartBeat(params *SecretsServiceRunHeartBeatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceRunHeartBeatOK, error)

	SecretsServiceSearch(params *SecretsServiceSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceSearchOK, error)

	SecretsServiceSearchSecretLookup(params *SecretsServiceSearchSecretLookupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceSearchSecretLookupOK, error)

	SecretsServiceSearchV2(params *SecretsServiceSearchV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceSearchV2OK, error)

	SecretsServiceUndeleteSecret(params *SecretsServiceUndeleteSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUndeleteSecretOK, error)

	SecretsServiceUndeleteSecretV2(params *SecretsServiceUndeleteSecretV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUndeleteSecretV2OK, error)

	SecretsServiceUpdateExpiration(params *SecretsServiceUpdateExpirationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUpdateExpirationOK, error)

	SecretsServiceUpdateListFieldListDefinitions(params *SecretsServiceUpdateListFieldListDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUpdateListFieldListDefinitionsOK, error)

	SecretsServiceUpdateSecret(params *SecretsServiceUpdateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUpdateSecretOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SecretsServiceCreateSecret creates secret

Create a new secret
*/
func (a *Client) SecretsServiceCreateSecret(params *SecretsServiceCreateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceCreateSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceCreateSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_CreateSecret",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceCreateSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceCreateSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_CreateSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceDelete deactivates a secret

A deactivated secret is hidden from users who do not have a role containing the View Inactive Secrets permission. Secret Server uses these "soft deletes" to maintain the audit history for all data. However, deactivated secrets are still accessible by administrators (like a permanent Recycle Bin) to ensure that audit history is maintained and to support recovery. A user must have the "View Inactive Secrets" permission in addition to Owner permission on a secret to access the secret View page for a deleted secret. To permanently remove all information on a secret, use the "Erase Secret" function.
*/
func (a *Client) SecretsServiceDelete(params *SecretsServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceDeleteListFieldListDefinitions deletes secret list field list data

Deletes the lists associated to a secret list data field
*/
func (a *Client) SecretsServiceDeleteListFieldListDefinitions(params *SecretsServiceDeleteListFieldListDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceDeleteListFieldListDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceDeleteListFieldListDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_DeleteListFieldListDefinitions",
		Method:             "DELETE",
		PathPattern:        "/api/v1/secrets/{id}/fields/{slug}/listdetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceDeleteListFieldListDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceDeleteListFieldListDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_DeleteListFieldListDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceExpire expires secret

Expire a secret
*/
func (a *Client) SecretsServiceExpire(params *SecretsServiceExpireParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceExpireOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_Expire",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/{id}/expire",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceExpireReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceExpireOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_Expire: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetField gets secret field

Get a secret data field
*/
func (a *Client) SecretsServiceGetField(params *SecretsServiceGetFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetField",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/{id}/fields/{slug}",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetGeneral gets secret detail general

Retrieve details about a secret.
*/
func (a *Client) SecretsServiceGetGeneral(params *SecretsServiceGetGeneralParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetGeneralOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetGeneralParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetGeneral",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/secret-detail/{id}/general",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetGeneralReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetGeneralOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetGeneral: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetListField gets secret list field

Get the items associated to a secret list data field
*/
func (a *Client) SecretsServiceGetListField(params *SecretsServiceGetListFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetListFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetListFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetListField",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/{id}/fields/{slug}/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetListFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetListFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetListField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetListFieldListDefinitions gets secret list field list data

Get the lists associated to a secret list data field
*/
func (a *Client) SecretsServiceGetListFieldListDefinitions(params *SecretsServiceGetListFieldListDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetListFieldListDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetListFieldListDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetListFieldListDefinitions",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/{id}/fields/{slug}/listdetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetListFieldListDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetListFieldListDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetListFieldListDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetLookup lookups secret

Look up secret by ID and return secret name and ID
*/
func (a *Client) SecretsServiceGetLookup(params *SecretsServiceGetLookupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetLookupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetLookupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetLookup",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/lookup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetLookupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetLookupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetLookup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetRestricted gets restricted secret

Get a restricted secret
*/
func (a *Client) SecretsServiceGetRestricted(params *SecretsServiceGetRestrictedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetRestrictedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetRestrictedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetRestricted",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/{id}/restricted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetRestrictedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetRestrictedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetRestricted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetSecretExtendedSearchDetails secrets search extended details

Pass an array of secret IDs, presumably the results of a secret search and get extended details such as has launchers or is favorite.
*/
func (a *Client) SecretsServiceGetSecretExtendedSearchDetails(params *SecretsServiceGetSecretExtendedSearchDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetSecretExtendedSearchDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetSecretExtendedSearchDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetSecretExtendedSearchDetails",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/extended-search-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetSecretExtendedSearchDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetSecretExtendedSearchDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetSecretExtendedSearchDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetSecretState gets secret state

Retrieve state about a Secret such as whether it requires approval, doublelock, checkout, or other restricted actions to be performed before calling the get the secret.
*/
func (a *Client) SecretsServiceGetSecretState(params *SecretsServiceGetSecretStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetSecretStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetSecretStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetSecretState",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetSecretStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetSecretStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetSecretState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceGetSecretV2 gets secret

Get a single secret by ID
*/
func (a *Client) SecretsServiceGetSecretV2(params *SecretsServiceGetSecretV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceGetSecretV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceGetSecretV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_GetSecretV2",
		Method:             "GET",
		PathPattern:        "/api/v2/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceGetSecretV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceGetSecretV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_GetSecretV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServicePutField updates secret field

Update a secret data field
*/
func (a *Client) SecretsServicePutField(params *SecretsServicePutFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServicePutFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServicePutFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_PutField",
		Method:             "PUT",
		PathPattern:        "/api/v1/secrets/{id}/fields/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServicePutFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServicePutFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_PutField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceRunHeartBeat runs secret heartbeat

Check if secret is still valid
*/
func (a *Client) SecretsServiceRunHeartBeat(params *SecretsServiceRunHeartBeatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceRunHeartBeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceRunHeartBeatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_RunHeartBeat",
		Method:             "POST",
		PathPattern:        "/api/v1/secrets/{id}/heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceRunHeartBeatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceRunHeartBeatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_RunHeartBeat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceSearch searches secrets

Search, filter, sort, and page secrets (removed from 11.3.3, but exposed for completeness)
*/
func (a *Client) SecretsServiceSearch(params *SecretsServiceSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_Search",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceSearchSecretLookup lookups secrets with search

Search, filter, sort, and page secrets, returning only secret ID and name
*/
func (a *Client) SecretsServiceSearchSecretLookup(params *SecretsServiceSearchSecretLookupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceSearchSecretLookupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceSearchSecretLookupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_SearchSecretLookup",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets/lookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceSearchSecretLookupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceSearchSecretLookupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_SearchSecretLookup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceSearchV2 searches secrets

Search, filter, sort, and page secrets
*/
func (a *Client) SecretsServiceSearchV2(params *SecretsServiceSearchV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceSearchV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceSearchV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_SearchV2",
		Method:             "GET",
		PathPattern:        "/api/v2/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceSearchV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceSearchV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_SearchV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceUndeleteSecret undeletes a secret

Undelete a Secret
*/
func (a *Client) SecretsServiceUndeleteSecret(params *SecretsServiceUndeleteSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUndeleteSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceUndeleteSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_UndeleteSecret",
		Method:             "PUT",
		PathPattern:        "/api/v1/secrets/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceUndeleteSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceUndeleteSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_UndeleteSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceUndeleteSecretV2 undeletes a secret

Undelete a Secret
*/
func (a *Client) SecretsServiceUndeleteSecretV2(params *SecretsServiceUndeleteSecretV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUndeleteSecretV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceUndeleteSecretV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_UndeleteSecretV2",
		Method:             "PUT",
		PathPattern:        "/api/v2/secrets/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceUndeleteSecretV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceUndeleteSecretV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_UndeleteSecretV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceUpdateExpiration updates a secret expiration

Update a Secret expiration
*/
func (a *Client) SecretsServiceUpdateExpiration(params *SecretsServiceUpdateExpirationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUpdateExpirationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceUpdateExpirationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_UpdateExpiration",
		Method:             "PUT",
		PathPattern:        "/api/v1/secrets/{id}/expiration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceUpdateExpirationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceUpdateExpirationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_UpdateExpiration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceUpdateListFieldListDefinitions updates secret list field list data

Updates the lists associated to a secret list data field
*/
func (a *Client) SecretsServiceUpdateListFieldListDefinitions(params *SecretsServiceUpdateListFieldListDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUpdateListFieldListDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceUpdateListFieldListDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_UpdateListFieldListDefinitions",
		Method:             "PUT",
		PathPattern:        "/api/v1/secrets/{id}/fields/{slug}/listdetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceUpdateListFieldListDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceUpdateListFieldListDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_UpdateListFieldListDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SecretsServiceUpdateSecret updates secret

Update a single secret by ID
*/
func (a *Client) SecretsServiceUpdateSecret(params *SecretsServiceUpdateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecretsServiceUpdateSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsServiceUpdateSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretsService_UpdateSecret",
		Method:             "PUT",
		PathPattern:        "/api/v1/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretsServiceUpdateSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretsServiceUpdateSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretsService_UpdateSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
