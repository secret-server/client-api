// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// UsersServiceUpdateUserReader is a Reader for the UsersServiceUpdateUser structure.
type UsersServiceUpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UsersServiceUpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUsersServiceUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUsersServiceUpdateUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUsersServiceUpdateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUsersServiceUpdateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/users/{id}] UsersService_UpdateUser", response, response.Code())
	}
}

// NewUsersServiceUpdateUserOK creates a UsersServiceUpdateUserOK with default headers values
func NewUsersServiceUpdateUserOK() *UsersServiceUpdateUserOK {
	return &UsersServiceUpdateUserOK{}
}

/*
UsersServiceUpdateUserOK describes a response with status code 200, with default header values.

User object
*/
type UsersServiceUpdateUserOK struct {
	Payload *models.UserModel
}

// IsSuccess returns true when this users service update user o k response has a 2xx status code
func (o *UsersServiceUpdateUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this users service update user o k response has a 3xx status code
func (o *UsersServiceUpdateUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service update user o k response has a 4xx status code
func (o *UsersServiceUpdateUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this users service update user o k response has a 5xx status code
func (o *UsersServiceUpdateUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this users service update user o k response a status code equal to that given
func (o *UsersServiceUpdateUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the users service update user o k response
func (o *UsersServiceUpdateUserOK) Code() int {
	return 200
}

func (o *UsersServiceUpdateUserOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserOK  %+v", 200, o.Payload)
}

func (o *UsersServiceUpdateUserOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserOK  %+v", 200, o.Payload)
}

func (o *UsersServiceUpdateUserOK) GetPayload() *models.UserModel {
	return o.Payload
}

func (o *UsersServiceUpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersServiceUpdateUserBadRequest creates a UsersServiceUpdateUserBadRequest with default headers values
func NewUsersServiceUpdateUserBadRequest() *UsersServiceUpdateUserBadRequest {
	return &UsersServiceUpdateUserBadRequest{}
}

/*
UsersServiceUpdateUserBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UsersServiceUpdateUserBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this users service update user bad request response has a 2xx status code
func (o *UsersServiceUpdateUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users service update user bad request response has a 3xx status code
func (o *UsersServiceUpdateUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service update user bad request response has a 4xx status code
func (o *UsersServiceUpdateUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this users service update user bad request response has a 5xx status code
func (o *UsersServiceUpdateUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this users service update user bad request response a status code equal to that given
func (o *UsersServiceUpdateUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the users service update user bad request response
func (o *UsersServiceUpdateUserBadRequest) Code() int {
	return 400
}

func (o *UsersServiceUpdateUserBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserBadRequest  %+v", 400, o.Payload)
}

func (o *UsersServiceUpdateUserBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserBadRequest  %+v", 400, o.Payload)
}

func (o *UsersServiceUpdateUserBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *UsersServiceUpdateUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersServiceUpdateUserForbidden creates a UsersServiceUpdateUserForbidden with default headers values
func NewUsersServiceUpdateUserForbidden() *UsersServiceUpdateUserForbidden {
	return &UsersServiceUpdateUserForbidden{}
}

/*
UsersServiceUpdateUserForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type UsersServiceUpdateUserForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this users service update user forbidden response has a 2xx status code
func (o *UsersServiceUpdateUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users service update user forbidden response has a 3xx status code
func (o *UsersServiceUpdateUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service update user forbidden response has a 4xx status code
func (o *UsersServiceUpdateUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this users service update user forbidden response has a 5xx status code
func (o *UsersServiceUpdateUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this users service update user forbidden response a status code equal to that given
func (o *UsersServiceUpdateUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the users service update user forbidden response
func (o *UsersServiceUpdateUserForbidden) Code() int {
	return 403
}

func (o *UsersServiceUpdateUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *UsersServiceUpdateUserForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *UsersServiceUpdateUserForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *UsersServiceUpdateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersServiceUpdateUserInternalServerError creates a UsersServiceUpdateUserInternalServerError with default headers values
func NewUsersServiceUpdateUserInternalServerError() *UsersServiceUpdateUserInternalServerError {
	return &UsersServiceUpdateUserInternalServerError{}
}

/*
UsersServiceUpdateUserInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UsersServiceUpdateUserInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this users service update user internal server error response has a 2xx status code
func (o *UsersServiceUpdateUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users service update user internal server error response has a 3xx status code
func (o *UsersServiceUpdateUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service update user internal server error response has a 4xx status code
func (o *UsersServiceUpdateUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this users service update user internal server error response has a 5xx status code
func (o *UsersServiceUpdateUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this users service update user internal server error response a status code equal to that given
func (o *UsersServiceUpdateUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the users service update user internal server error response
func (o *UsersServiceUpdateUserInternalServerError) Code() int {
	return 500
}

func (o *UsersServiceUpdateUserInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *UsersServiceUpdateUserInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/users/{id}][%d] usersServiceUpdateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *UsersServiceUpdateUserInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *UsersServiceUpdateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
