// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	UsersServiceCreateUserRoles(params *UsersServiceCreateUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceCreateUserRolesOK, error)

	UsersServiceGet(params *UsersServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceGetOK, error)

	UsersServiceGetRoles(params *UsersServiceGetRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceGetRolesOK, error)

	UsersServiceGetUserRoles(params *UsersServiceGetUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceGetUserRolesOK, error)

	UsersServiceLookup(params *UsersServiceLookupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceLookupOK, error)

	UsersServicePatchUser(params *UsersServicePatchUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServicePatchUserOK, error)

	UsersServiceUpdateUser(params *UsersServiceUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceUpdateUserOK, error)

	UsersServiceUpdateUserRoles(params *UsersServiceUpdateUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceUpdateUserRolesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
UsersServiceCreateUserRoles adds roles to existing user

Add roles to existing user
*/
func (a *Client) UsersServiceCreateUserRoles(params *UsersServiceCreateUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceCreateUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServiceCreateUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_CreateUserRoles",
		Method:             "POST",
		PathPattern:        "/api/v1/users/{id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServiceCreateUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServiceCreateUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_CreateUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersServiceGet gets user

Get a single user by ID
*/
func (a *Client) UsersServiceGet(params *UsersServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_Get",
		Method:             "GET",
		PathPattern:        "/api/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersServiceGetRoles gets roles for user

Gets roles for user
*/
func (a *Client) UsersServiceGetRoles(params *UsersServiceGetRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceGetRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServiceGetRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_GetRoles",
		Method:             "GET",
		PathPattern:        "/api/v1/users/{id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServiceGetRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServiceGetRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_GetRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersServiceGetUserRoles gets user roles

Get the roles for a user by ID
*/
func (a *Client) UsersServiceGetUserRoles(params *UsersServiceGetUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceGetUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServiceGetUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_GetUserRoles",
		Method:             "GET",
		PathPattern:        "/api/v1/users/{userId}/roles-assigned",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServiceGetUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServiceGetUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_GetUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersServiceLookup lookups users

Search, filter, sort, and page users, returning only user ID and name
*/
func (a *Client) UsersServiceLookup(params *UsersServiceLookupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceLookupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServiceLookupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_Lookup",
		Method:             "GET",
		PathPattern:        "/api/v1/users/lookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServiceLookupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServiceLookupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_Lookup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersServicePatchUser updates included properties for user by Id

Update included properties for user by Id
*/
func (a *Client) UsersServicePatchUser(params *UsersServicePatchUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServicePatchUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServicePatchUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_PatchUser",
		Method:             "PATCH",
		PathPattern:        "/api/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServicePatchUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServicePatchUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_PatchUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersServiceUpdateUser updates user

Update a single user by ID
*/
func (a *Client) UsersServiceUpdateUser(params *UsersServiceUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServiceUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_UpdateUser",
		Method:             "PUT",
		PathPattern:        "/api/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServiceUpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServiceUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_UpdateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersServiceUpdateUserRoles updates all roles on user

Update all roles on user
*/
func (a *Client) UsersServiceUpdateUserRoles(params *UsersServiceUpdateUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersServiceUpdateUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersServiceUpdateUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UsersService_UpdateUserRoles",
		Method:             "PUT",
		PathPattern:        "/api/v1/users/{id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UsersServiceUpdateUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersServiceUpdateUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UsersService_UpdateUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
