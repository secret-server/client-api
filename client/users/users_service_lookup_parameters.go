// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsersServiceLookupParams creates a new UsersServiceLookupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsersServiceLookupParams() *UsersServiceLookupParams {
	return &UsersServiceLookupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsersServiceLookupParamsWithTimeout creates a new UsersServiceLookupParams object
// with the ability to set a timeout on a request.
func NewUsersServiceLookupParamsWithTimeout(timeout time.Duration) *UsersServiceLookupParams {
	return &UsersServiceLookupParams{
		timeout: timeout,
	}
}

// NewUsersServiceLookupParamsWithContext creates a new UsersServiceLookupParams object
// with the ability to set a context for a request.
func NewUsersServiceLookupParamsWithContext(ctx context.Context) *UsersServiceLookupParams {
	return &UsersServiceLookupParams{
		Context: ctx,
	}
}

// NewUsersServiceLookupParamsWithHTTPClient creates a new UsersServiceLookupParams object
// with the ability to set a custom HTTPClient for a request.
func NewUsersServiceLookupParamsWithHTTPClient(client *http.Client) *UsersServiceLookupParams {
	return &UsersServiceLookupParams{
		HTTPClient: client,
	}
}

/*
UsersServiceLookupParams contains all the parameters to send to the API endpoint

	for the users service lookup operation.

	Typically these are written to a http.Request.
*/
type UsersServiceLookupParams struct {

	/* FilterDomainID.

	   If not null, filters users by Active Directory domain.

	   Format: int32
	*/
	FilterDomainID *int32

	/* FilterExcludeInboxRuleIDSubscribers.

	   When set all subscribers not subscribed directly to this inbox notification rule will be excluded.

	   Format: int32
	*/
	FilterExcludeInboxRuleIDSubscribers *int32

	/* FilterIncludeInactive.

	   Whether to include inactive users in the results.
	*/
	FilterIncludeInactive *bool

	/* FilterSearchFields.

	   User fields to search.
	*/
	FilterSearchFields []string

	/* FilterSearchText.

	   The text to match in the username, display name, or email address.
	*/
	FilterSearchText *string

	/* FilterUserIds.

	   User Ids to search.
	*/
	FilterUserIds []int64

	/* Skip.

	   Number of records to skip before taking results

	   Format: int32
	*/
	Skip *int32

	/* SortBy0Direction.

	   Sort direction
	*/
	SortBy0Direction *string

	/* SortBy0Name.

	   Sort field name
	*/
	SortBy0Name *string

	/* SortBy0Priority.

	   Priority index. Sorts with lower values are executed earlier

	   Format: int32
	*/
	SortBy0Priority *int32

	/* Take.

	   Maximum number of records to include in results

	   Format: int32
	*/
	Take *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the users service lookup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersServiceLookupParams) WithDefaults() *UsersServiceLookupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the users service lookup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersServiceLookupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the users service lookup params
func (o *UsersServiceLookupParams) WithTimeout(timeout time.Duration) *UsersServiceLookupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users service lookup params
func (o *UsersServiceLookupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users service lookup params
func (o *UsersServiceLookupParams) WithContext(ctx context.Context) *UsersServiceLookupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users service lookup params
func (o *UsersServiceLookupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users service lookup params
func (o *UsersServiceLookupParams) WithHTTPClient(client *http.Client) *UsersServiceLookupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users service lookup params
func (o *UsersServiceLookupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterDomainID adds the filterDomainID to the users service lookup params
func (o *UsersServiceLookupParams) WithFilterDomainID(filterDomainID *int32) *UsersServiceLookupParams {
	o.SetFilterDomainID(filterDomainID)
	return o
}

// SetFilterDomainID adds the filterDomainId to the users service lookup params
func (o *UsersServiceLookupParams) SetFilterDomainID(filterDomainID *int32) {
	o.FilterDomainID = filterDomainID
}

// WithFilterExcludeInboxRuleIDSubscribers adds the filterExcludeInboxRuleIDSubscribers to the users service lookup params
func (o *UsersServiceLookupParams) WithFilterExcludeInboxRuleIDSubscribers(filterExcludeInboxRuleIDSubscribers *int32) *UsersServiceLookupParams {
	o.SetFilterExcludeInboxRuleIDSubscribers(filterExcludeInboxRuleIDSubscribers)
	return o
}

// SetFilterExcludeInboxRuleIDSubscribers adds the filterExcludeInboxRuleIdSubscribers to the users service lookup params
func (o *UsersServiceLookupParams) SetFilterExcludeInboxRuleIDSubscribers(filterExcludeInboxRuleIDSubscribers *int32) {
	o.FilterExcludeInboxRuleIDSubscribers = filterExcludeInboxRuleIDSubscribers
}

// WithFilterIncludeInactive adds the filterIncludeInactive to the users service lookup params
func (o *UsersServiceLookupParams) WithFilterIncludeInactive(filterIncludeInactive *bool) *UsersServiceLookupParams {
	o.SetFilterIncludeInactive(filterIncludeInactive)
	return o
}

// SetFilterIncludeInactive adds the filterIncludeInactive to the users service lookup params
func (o *UsersServiceLookupParams) SetFilterIncludeInactive(filterIncludeInactive *bool) {
	o.FilterIncludeInactive = filterIncludeInactive
}

// WithFilterSearchFields adds the filterSearchFields to the users service lookup params
func (o *UsersServiceLookupParams) WithFilterSearchFields(filterSearchFields []string) *UsersServiceLookupParams {
	o.SetFilterSearchFields(filterSearchFields)
	return o
}

// SetFilterSearchFields adds the filterSearchFields to the users service lookup params
func (o *UsersServiceLookupParams) SetFilterSearchFields(filterSearchFields []string) {
	o.FilterSearchFields = filterSearchFields
}

// WithFilterSearchText adds the filterSearchText to the users service lookup params
func (o *UsersServiceLookupParams) WithFilterSearchText(filterSearchText *string) *UsersServiceLookupParams {
	o.SetFilterSearchText(filterSearchText)
	return o
}

// SetFilterSearchText adds the filterSearchText to the users service lookup params
func (o *UsersServiceLookupParams) SetFilterSearchText(filterSearchText *string) {
	o.FilterSearchText = filterSearchText
}

// WithFilterUserIds adds the filterUserIds to the users service lookup params
func (o *UsersServiceLookupParams) WithFilterUserIds(filterUserIds []int64) *UsersServiceLookupParams {
	o.SetFilterUserIds(filterUserIds)
	return o
}

// SetFilterUserIds adds the filterUserIds to the users service lookup params
func (o *UsersServiceLookupParams) SetFilterUserIds(filterUserIds []int64) {
	o.FilterUserIds = filterUserIds
}

// WithSkip adds the skip to the users service lookup params
func (o *UsersServiceLookupParams) WithSkip(skip *int32) *UsersServiceLookupParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the users service lookup params
func (o *UsersServiceLookupParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithSortBy0Direction adds the sortBy0Direction to the users service lookup params
func (o *UsersServiceLookupParams) WithSortBy0Direction(sortBy0Direction *string) *UsersServiceLookupParams {
	o.SetSortBy0Direction(sortBy0Direction)
	return o
}

// SetSortBy0Direction adds the sortBy0Direction to the users service lookup params
func (o *UsersServiceLookupParams) SetSortBy0Direction(sortBy0Direction *string) {
	o.SortBy0Direction = sortBy0Direction
}

// WithSortBy0Name adds the sortBy0Name to the users service lookup params
func (o *UsersServiceLookupParams) WithSortBy0Name(sortBy0Name *string) *UsersServiceLookupParams {
	o.SetSortBy0Name(sortBy0Name)
	return o
}

// SetSortBy0Name adds the sortBy0Name to the users service lookup params
func (o *UsersServiceLookupParams) SetSortBy0Name(sortBy0Name *string) {
	o.SortBy0Name = sortBy0Name
}

// WithSortBy0Priority adds the sortBy0Priority to the users service lookup params
func (o *UsersServiceLookupParams) WithSortBy0Priority(sortBy0Priority *int32) *UsersServiceLookupParams {
	o.SetSortBy0Priority(sortBy0Priority)
	return o
}

// SetSortBy0Priority adds the sortBy0Priority to the users service lookup params
func (o *UsersServiceLookupParams) SetSortBy0Priority(sortBy0Priority *int32) {
	o.SortBy0Priority = sortBy0Priority
}

// WithTake adds the take to the users service lookup params
func (o *UsersServiceLookupParams) WithTake(take *int32) *UsersServiceLookupParams {
	o.SetTake(take)
	return o
}

// SetTake adds the take to the users service lookup params
func (o *UsersServiceLookupParams) SetTake(take *int32) {
	o.Take = take
}

// WriteToRequest writes these params to a swagger request
func (o *UsersServiceLookupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterDomainID != nil {

		// query param filter.domainId
		var qrFilterDomainID int32

		if o.FilterDomainID != nil {
			qrFilterDomainID = *o.FilterDomainID
		}
		qFilterDomainID := swag.FormatInt32(qrFilterDomainID)
		if qFilterDomainID != "" {

			if err := r.SetQueryParam("filter.domainId", qFilterDomainID); err != nil {
				return err
			}
		}
	}

	if o.FilterExcludeInboxRuleIDSubscribers != nil {

		// query param filter.excludeInboxRuleIdSubscribers
		var qrFilterExcludeInboxRuleIDSubscribers int32

		if o.FilterExcludeInboxRuleIDSubscribers != nil {
			qrFilterExcludeInboxRuleIDSubscribers = *o.FilterExcludeInboxRuleIDSubscribers
		}
		qFilterExcludeInboxRuleIDSubscribers := swag.FormatInt32(qrFilterExcludeInboxRuleIDSubscribers)
		if qFilterExcludeInboxRuleIDSubscribers != "" {

			if err := r.SetQueryParam("filter.excludeInboxRuleIdSubscribers", qFilterExcludeInboxRuleIDSubscribers); err != nil {
				return err
			}
		}
	}

	if o.FilterIncludeInactive != nil {

		// query param filter.includeInactive
		var qrFilterIncludeInactive bool

		if o.FilterIncludeInactive != nil {
			qrFilterIncludeInactive = *o.FilterIncludeInactive
		}
		qFilterIncludeInactive := swag.FormatBool(qrFilterIncludeInactive)
		if qFilterIncludeInactive != "" {

			if err := r.SetQueryParam("filter.includeInactive", qFilterIncludeInactive); err != nil {
				return err
			}
		}
	}

	if o.FilterSearchFields != nil {

		// binding items for filter.searchFields
		joinedFilterSearchFields := o.bindParamFilterSearchFields(reg)

		// query array param filter.searchFields
		if err := r.SetQueryParam("filter.searchFields", joinedFilterSearchFields...); err != nil {
			return err
		}
	}

	if o.FilterSearchText != nil {

		// query param filter.searchText
		var qrFilterSearchText string

		if o.FilterSearchText != nil {
			qrFilterSearchText = *o.FilterSearchText
		}
		qFilterSearchText := qrFilterSearchText
		if qFilterSearchText != "" {

			if err := r.SetQueryParam("filter.searchText", qFilterSearchText); err != nil {
				return err
			}
		}
	}

	if o.FilterUserIds != nil {

		// binding items for filter.userIds
		joinedFilterUserIds := o.bindParamFilterUserIds(reg)

		// query array param filter.userIds
		if err := r.SetQueryParam("filter.userIds", joinedFilterUserIds...); err != nil {
			return err
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.SortBy0Direction != nil {

		// query param sortBy[0].direction
		var qrSortBy0Direction string

		if o.SortBy0Direction != nil {
			qrSortBy0Direction = *o.SortBy0Direction
		}
		qSortBy0Direction := qrSortBy0Direction
		if qSortBy0Direction != "" {

			if err := r.SetQueryParam("sortBy[0].direction", qSortBy0Direction); err != nil {
				return err
			}
		}
	}

	if o.SortBy0Name != nil {

		// query param sortBy[0].name
		var qrSortBy0Name string

		if o.SortBy0Name != nil {
			qrSortBy0Name = *o.SortBy0Name
		}
		qSortBy0Name := qrSortBy0Name
		if qSortBy0Name != "" {

			if err := r.SetQueryParam("sortBy[0].name", qSortBy0Name); err != nil {
				return err
			}
		}
	}

	if o.SortBy0Priority != nil {

		// query param sortBy[0].priority
		var qrSortBy0Priority int32

		if o.SortBy0Priority != nil {
			qrSortBy0Priority = *o.SortBy0Priority
		}
		qSortBy0Priority := swag.FormatInt32(qrSortBy0Priority)
		if qSortBy0Priority != "" {

			if err := r.SetQueryParam("sortBy[0].priority", qSortBy0Priority); err != nil {
				return err
			}
		}
	}

	if o.Take != nil {

		// query param take
		var qrTake int32

		if o.Take != nil {
			qrTake = *o.Take
		}
		qTake := swag.FormatInt32(qrTake)
		if qTake != "" {

			if err := r.SetQueryParam("take", qTake); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUsersServiceLookup binds the parameter filter.searchFields
func (o *UsersServiceLookupParams) bindParamFilterSearchFields(formats strfmt.Registry) []string {
	filterSearchFieldsIR := o.FilterSearchFields

	var filterSearchFieldsIC []string
	for _, filterSearchFieldsIIR := range filterSearchFieldsIR { // explode []string

		filterSearchFieldsIIV := filterSearchFieldsIIR // string as string
		filterSearchFieldsIC = append(filterSearchFieldsIC, filterSearchFieldsIIV)
	}

	// items.CollectionFormat: "multi"
	filterSearchFieldsIS := swag.JoinByFormat(filterSearchFieldsIC, "multi")

	return filterSearchFieldsIS
}

// bindParamUsersServiceLookup binds the parameter filter.userIds
func (o *UsersServiceLookupParams) bindParamFilterUserIds(formats strfmt.Registry) []string {
	filterUserIdsIR := o.FilterUserIds

	var filterUserIdsIC []string
	for _, filterUserIdsIIR := range filterUserIdsIR { // explode []int64

		filterUserIdsIIV := swag.FormatInt64(filterUserIdsIIR) // int64 as string
		filterUserIdsIC = append(filterUserIdsIC, filterUserIdsIIV)
	}

	// items.CollectionFormat: "multi"
	filterUserIdsIS := swag.JoinByFormat(filterUserIdsIC, "multi")

	return filterUserIdsIS
}
