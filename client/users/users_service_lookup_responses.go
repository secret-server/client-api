// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/secret-server/client-api/models"
)

// UsersServiceLookupReader is a Reader for the UsersServiceLookup structure.
type UsersServiceLookupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UsersServiceLookupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUsersServiceLookupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUsersServiceLookupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUsersServiceLookupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUsersServiceLookupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/users/lookup] UsersService_Lookup", response, response.Code())
	}
}

// NewUsersServiceLookupOK creates a UsersServiceLookupOK with default headers values
func NewUsersServiceLookupOK() *UsersServiceLookupOK {
	return &UsersServiceLookupOK{}
}

/*
UsersServiceLookupOK describes a response with status code 200, with default header values.

User search result object
*/
type UsersServiceLookupOK struct {
	Payload *models.PagingOfUserLookup
}

// IsSuccess returns true when this users service lookup o k response has a 2xx status code
func (o *UsersServiceLookupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this users service lookup o k response has a 3xx status code
func (o *UsersServiceLookupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service lookup o k response has a 4xx status code
func (o *UsersServiceLookupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this users service lookup o k response has a 5xx status code
func (o *UsersServiceLookupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this users service lookup o k response a status code equal to that given
func (o *UsersServiceLookupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the users service lookup o k response
func (o *UsersServiceLookupOK) Code() int {
	return 200
}

func (o *UsersServiceLookupOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupOK  %+v", 200, o.Payload)
}

func (o *UsersServiceLookupOK) String() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupOK  %+v", 200, o.Payload)
}

func (o *UsersServiceLookupOK) GetPayload() *models.PagingOfUserLookup {
	return o.Payload
}

func (o *UsersServiceLookupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagingOfUserLookup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersServiceLookupBadRequest creates a UsersServiceLookupBadRequest with default headers values
func NewUsersServiceLookupBadRequest() *UsersServiceLookupBadRequest {
	return &UsersServiceLookupBadRequest{}
}

/*
UsersServiceLookupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UsersServiceLookupBadRequest struct {
	Payload *models.BadRequestResponse
}

// IsSuccess returns true when this users service lookup bad request response has a 2xx status code
func (o *UsersServiceLookupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users service lookup bad request response has a 3xx status code
func (o *UsersServiceLookupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service lookup bad request response has a 4xx status code
func (o *UsersServiceLookupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this users service lookup bad request response has a 5xx status code
func (o *UsersServiceLookupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this users service lookup bad request response a status code equal to that given
func (o *UsersServiceLookupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the users service lookup bad request response
func (o *UsersServiceLookupBadRequest) Code() int {
	return 400
}

func (o *UsersServiceLookupBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupBadRequest  %+v", 400, o.Payload)
}

func (o *UsersServiceLookupBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupBadRequest  %+v", 400, o.Payload)
}

func (o *UsersServiceLookupBadRequest) GetPayload() *models.BadRequestResponse {
	return o.Payload
}

func (o *UsersServiceLookupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersServiceLookupForbidden creates a UsersServiceLookupForbidden with default headers values
func NewUsersServiceLookupForbidden() *UsersServiceLookupForbidden {
	return &UsersServiceLookupForbidden{}
}

/*
UsersServiceLookupForbidden describes a response with status code 403, with default header values.

Authentication failed
*/
type UsersServiceLookupForbidden struct {
	Payload *models.AuthenticationFailedResponse
}

// IsSuccess returns true when this users service lookup forbidden response has a 2xx status code
func (o *UsersServiceLookupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users service lookup forbidden response has a 3xx status code
func (o *UsersServiceLookupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service lookup forbidden response has a 4xx status code
func (o *UsersServiceLookupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this users service lookup forbidden response has a 5xx status code
func (o *UsersServiceLookupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this users service lookup forbidden response a status code equal to that given
func (o *UsersServiceLookupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the users service lookup forbidden response
func (o *UsersServiceLookupForbidden) Code() int {
	return 403
}

func (o *UsersServiceLookupForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupForbidden  %+v", 403, o.Payload)
}

func (o *UsersServiceLookupForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupForbidden  %+v", 403, o.Payload)
}

func (o *UsersServiceLookupForbidden) GetPayload() *models.AuthenticationFailedResponse {
	return o.Payload
}

func (o *UsersServiceLookupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationFailedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersServiceLookupInternalServerError creates a UsersServiceLookupInternalServerError with default headers values
func NewUsersServiceLookupInternalServerError() *UsersServiceLookupInternalServerError {
	return &UsersServiceLookupInternalServerError{}
}

/*
UsersServiceLookupInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UsersServiceLookupInternalServerError struct {
	Payload *models.InternalServerErrorResponse
}

// IsSuccess returns true when this users service lookup internal server error response has a 2xx status code
func (o *UsersServiceLookupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users service lookup internal server error response has a 3xx status code
func (o *UsersServiceLookupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users service lookup internal server error response has a 4xx status code
func (o *UsersServiceLookupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this users service lookup internal server error response has a 5xx status code
func (o *UsersServiceLookupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this users service lookup internal server error response a status code equal to that given
func (o *UsersServiceLookupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the users service lookup internal server error response
func (o *UsersServiceLookupInternalServerError) Code() int {
	return 500
}

func (o *UsersServiceLookupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupInternalServerError  %+v", 500, o.Payload)
}

func (o *UsersServiceLookupInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/users/lookup][%d] usersServiceLookupInternalServerError  %+v", 500, o.Payload)
}

func (o *UsersServiceLookupInternalServerError) GetPayload() *models.InternalServerErrorResponse {
	return o.Payload
}

func (o *UsersServiceLookupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
